generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Patient {
  id         Int      @id @default(autoincrement())
  name       String
  phone      String?
  email      String?
  created_at DateTime @default(now())
  tickets    Ticket[]
}

model Department {
  id             Int             @id @default(autoincrement())
  name           String
  code           String          @unique
  description    String?
  active         Boolean         @default(true)
  last_ticket_no Int             @default(0) // Track the last ticket number for continuous numbering
  created_at     DateTime        @default(now())
  tickets        Ticket[]
  staff_users    StaffUser[]
  ticket_history TicketHistory[]
}

model StaffUser {
  id                  Int             @id @default(autoincrement())
  name                String
  email               String          @unique
  password            String
  role                String // admin, front-desk, department
  department_id       Int?
  active              Boolean         @default(true)
  created_at          DateTime        @default(now())
  department          Department?     @relation(fields: [department_id], references: [id])
  served_tickets      Ticket[]        @relation("ServedBy")
  ticket_logs         TicketLog[]
  ticket_history      TicketHistory[]
  reset_token         String? // For password reset
  reset_token_expires DateTime? // For password reset
}

model Ticket {
  id                 Int             @id @default(autoincrement())
  ticket_no          String          @unique
  original_ticket_no String? // Store original ticket number for forwarded tickets
  patient_id         Int
  department_id      Int
  status             String          @default("waiting") // waiting, serving, served, forwarded, hold
  forwarded_from     Int?
  priority           Int             @default(0)
  created_at         DateTime        @default(now())
  served_at          DateTime?
  served_by          Int?
  patient            Patient         @relation(fields: [patient_id], references: [id])
  department         Department      @relation(fields: [department_id], references: [id])
  served_by_user     StaffUser?      @relation("ServedBy", fields: [served_by], references: [id])
  ticket_logs        TicketLog[]
  ticket_history     TicketHistory[]
}

model TicketLog {
  id           Int       @id @default(autoincrement())
  ticket_id    Int
  action       String
  performed_by Int
  notes        String?
  created_at   DateTime  @default(now())
  ticket       Ticket    @relation(fields: [ticket_id], references: [id])
  staff_user   StaffUser @relation(fields: [performed_by], references: [id])
}

model TicketHistory {
  id                     Int        @id @default(autoincrement())
  ticket_id              Int
  department_id          Int
  staff_id               Int?
  action                 String // created, forwarded, served, hold, returned
  previous_department_id Int?
  time_spent             Int? // Time spent in seconds
  entry_time             DateTime   @default(now())
  exit_time              DateTime?
  ticket                 Ticket     @relation(fields: [ticket_id], references: [id])
  department             Department @relation(fields: [department_id], references: [id])
  staff                  StaffUser? @relation(fields: [staff_id], references: [id])
}
