
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model StaffUser
 * 
 */
export type StaffUser = $Result.DefaultSelection<Prisma.$StaffUserPayload>
/**
 * Model Ticket
 * 
 */
export type Ticket = $Result.DefaultSelection<Prisma.$TicketPayload>
/**
 * Model TicketLog
 * 
 */
export type TicketLog = $Result.DefaultSelection<Prisma.$TicketLogPayload>
/**
 * Model TicketHistory
 * 
 */
export type TicketHistory = $Result.DefaultSelection<Prisma.$TicketHistoryPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Patients
 * const patients = await prisma.patient.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Patients
   * const patients = await prisma.patient.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs>;

  /**
   * `prisma.staffUser`: Exposes CRUD operations for the **StaffUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffUsers
    * const staffUsers = await prisma.staffUser.findMany()
    * ```
    */
  get staffUser(): Prisma.StaffUserDelegate<ExtArgs>;

  /**
   * `prisma.ticket`: Exposes CRUD operations for the **Ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.ticket.findMany()
    * ```
    */
  get ticket(): Prisma.TicketDelegate<ExtArgs>;

  /**
   * `prisma.ticketLog`: Exposes CRUD operations for the **TicketLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TicketLogs
    * const ticketLogs = await prisma.ticketLog.findMany()
    * ```
    */
  get ticketLog(): Prisma.TicketLogDelegate<ExtArgs>;

  /**
   * `prisma.ticketHistory`: Exposes CRUD operations for the **TicketHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TicketHistories
    * const ticketHistories = await prisma.ticketHistory.findMany()
    * ```
    */
  get ticketHistory(): Prisma.TicketHistoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Patient: 'Patient',
    Department: 'Department',
    StaffUser: 'StaffUser',
    Ticket: 'Ticket',
    TicketLog: 'TicketLog',
    TicketHistory: 'TicketHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "patient" | "department" | "staffUser" | "ticket" | "ticketLog" | "ticketHistory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      StaffUser: {
        payload: Prisma.$StaffUserPayload<ExtArgs>
        fields: Prisma.StaffUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffUserPayload>
          }
          findFirst: {
            args: Prisma.StaffUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffUserPayload>
          }
          findMany: {
            args: Prisma.StaffUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffUserPayload>[]
          }
          create: {
            args: Prisma.StaffUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffUserPayload>
          }
          createMany: {
            args: Prisma.StaffUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffUserPayload>[]
          }
          delete: {
            args: Prisma.StaffUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffUserPayload>
          }
          update: {
            args: Prisma.StaffUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffUserPayload>
          }
          deleteMany: {
            args: Prisma.StaffUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StaffUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffUserPayload>
          }
          aggregate: {
            args: Prisma.StaffUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffUser>
          }
          groupBy: {
            args: Prisma.StaffUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffUserCountArgs<ExtArgs>
            result: $Utils.Optional<StaffUserCountAggregateOutputType> | number
          }
        }
      }
      Ticket: {
        payload: Prisma.$TicketPayload<ExtArgs>
        fields: Prisma.TicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findFirst: {
            args: Prisma.TicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findMany: {
            args: Prisma.TicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          create: {
            args: Prisma.TicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          createMany: {
            args: Prisma.TicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          delete: {
            args: Prisma.TicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          update: {
            args: Prisma.TicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          deleteMany: {
            args: Prisma.TicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          aggregate: {
            args: Prisma.TicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket>
          }
          groupBy: {
            args: Prisma.TicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketCountArgs<ExtArgs>
            result: $Utils.Optional<TicketCountAggregateOutputType> | number
          }
        }
      }
      TicketLog: {
        payload: Prisma.$TicketLogPayload<ExtArgs>
        fields: Prisma.TicketLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketLogPayload>
          }
          findFirst: {
            args: Prisma.TicketLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketLogPayload>
          }
          findMany: {
            args: Prisma.TicketLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketLogPayload>[]
          }
          create: {
            args: Prisma.TicketLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketLogPayload>
          }
          createMany: {
            args: Prisma.TicketLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketLogPayload>[]
          }
          delete: {
            args: Prisma.TicketLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketLogPayload>
          }
          update: {
            args: Prisma.TicketLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketLogPayload>
          }
          deleteMany: {
            args: Prisma.TicketLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketLogPayload>
          }
          aggregate: {
            args: Prisma.TicketLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicketLog>
          }
          groupBy: {
            args: Prisma.TicketLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketLogCountArgs<ExtArgs>
            result: $Utils.Optional<TicketLogCountAggregateOutputType> | number
          }
        }
      }
      TicketHistory: {
        payload: Prisma.$TicketHistoryPayload<ExtArgs>
        fields: Prisma.TicketHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketHistoryPayload>
          }
          findFirst: {
            args: Prisma.TicketHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketHistoryPayload>
          }
          findMany: {
            args: Prisma.TicketHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketHistoryPayload>[]
          }
          create: {
            args: Prisma.TicketHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketHistoryPayload>
          }
          createMany: {
            args: Prisma.TicketHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketHistoryPayload>[]
          }
          delete: {
            args: Prisma.TicketHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketHistoryPayload>
          }
          update: {
            args: Prisma.TicketHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketHistoryPayload>
          }
          deleteMany: {
            args: Prisma.TicketHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketHistoryPayload>
          }
          aggregate: {
            args: Prisma.TicketHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicketHistory>
          }
          groupBy: {
            args: Prisma.TicketHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<TicketHistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    tickets: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | PatientCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    tickets: number
    staff_users: number
    ticket_history: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | DepartmentCountOutputTypeCountTicketsArgs
    staff_users?: boolean | DepartmentCountOutputTypeCountStaff_usersArgs
    ticket_history?: boolean | DepartmentCountOutputTypeCountTicket_historyArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountStaff_usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffUserWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountTicket_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketHistoryWhereInput
  }


  /**
   * Count Type StaffUserCountOutputType
   */

  export type StaffUserCountOutputType = {
    served_tickets: number
    ticket_logs: number
    ticket_history: number
  }

  export type StaffUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    served_tickets?: boolean | StaffUserCountOutputTypeCountServed_ticketsArgs
    ticket_logs?: boolean | StaffUserCountOutputTypeCountTicket_logsArgs
    ticket_history?: boolean | StaffUserCountOutputTypeCountTicket_historyArgs
  }

  // Custom InputTypes
  /**
   * StaffUserCountOutputType without action
   */
  export type StaffUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUserCountOutputType
     */
    select?: StaffUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StaffUserCountOutputType without action
   */
  export type StaffUserCountOutputTypeCountServed_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }

  /**
   * StaffUserCountOutputType without action
   */
  export type StaffUserCountOutputTypeCountTicket_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketLogWhereInput
  }

  /**
   * StaffUserCountOutputType without action
   */
  export type StaffUserCountOutputTypeCountTicket_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketHistoryWhereInput
  }


  /**
   * Count Type TicketCountOutputType
   */

  export type TicketCountOutputType = {
    ticket_logs: number
    ticket_history: number
  }

  export type TicketCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket_logs?: boolean | TicketCountOutputTypeCountTicket_logsArgs
    ticket_history?: boolean | TicketCountOutputTypeCountTicket_historyArgs
  }

  // Custom InputTypes
  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketCountOutputType
     */
    select?: TicketCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeCountTicket_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketLogWhereInput
  }

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeCountTicket_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    id: number | null
  }

  export type PatientSumAggregateOutputType = {
    id: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: number | null
    name: string | null
    phone: string | null
    email: string | null
    created_at: Date | null
  }

  export type PatientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    phone: string | null
    email: string | null
    created_at: Date | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    name: number
    phone: number
    email: number
    created_at: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    id?: true
  }

  export type PatientSumAggregateInputType = {
    id?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    created_at?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    created_at?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    created_at?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: number
    name: string
    phone: string | null
    email: string | null
    created_at: Date
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    created_at?: boolean
    tickets?: boolean | Patient$ticketsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    created_at?: boolean
  }

  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | Patient$ticketsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      tickets: Prisma.$TicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      phone: string | null
      email: string | null
      created_at: Date
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends Patient$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */ 
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'Int'>
    readonly name: FieldRef<"Patient", 'String'>
    readonly phone: FieldRef<"Patient", 'String'>
    readonly email: FieldRef<"Patient", 'String'>
    readonly created_at: FieldRef<"Patient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
  }

  /**
   * Patient createManyAndReturn
   */
  export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
  }

  /**
   * Patient.tickets
   */
  export type Patient$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number | null
    last_ticket_no: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    id: number | null
    last_ticket_no: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    description: string | null
    active: boolean | null
    last_ticket_no: number | null
    created_at: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    description: string | null
    active: boolean | null
    last_ticket_no: number | null
    created_at: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    active: number
    last_ticket_no: number
    created_at: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
    last_ticket_no?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
    last_ticket_no?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    active?: true
    last_ticket_no?: true
    created_at?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    active?: true
    last_ticket_no?: true
    created_at?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    active?: true
    last_ticket_no?: true
    created_at?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: number
    name: string
    code: string
    description: string | null
    active: boolean
    last_ticket_no: number
    created_at: Date
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    active?: boolean
    last_ticket_no?: boolean
    created_at?: boolean
    tickets?: boolean | Department$ticketsArgs<ExtArgs>
    staff_users?: boolean | Department$staff_usersArgs<ExtArgs>
    ticket_history?: boolean | Department$ticket_historyArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    active?: boolean
    last_ticket_no?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    active?: boolean
    last_ticket_no?: boolean
    created_at?: boolean
  }

  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | Department$ticketsArgs<ExtArgs>
    staff_users?: boolean | Department$staff_usersArgs<ExtArgs>
    ticket_history?: boolean | Department$ticket_historyArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      tickets: Prisma.$TicketPayload<ExtArgs>[]
      staff_users: Prisma.$StaffUserPayload<ExtArgs>[]
      ticket_history: Prisma.$TicketHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string
      description: string | null
      active: boolean
      last_ticket_no: number
      created_at: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends Department$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Department$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    staff_users<T extends Department$staff_usersArgs<ExtArgs> = {}>(args?: Subset<T, Department$staff_usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "findMany"> | Null>
    ticket_history<T extends Department$ticket_historyArgs<ExtArgs> = {}>(args?: Subset<T, Department$ticket_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'Int'>
    readonly name: FieldRef<"Department", 'String'>
    readonly code: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
    readonly active: FieldRef<"Department", 'Boolean'>
    readonly last_ticket_no: FieldRef<"Department", 'Int'>
    readonly created_at: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department.tickets
   */
  export type Department$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Department.staff_users
   */
  export type Department$staff_usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    where?: StaffUserWhereInput
    orderBy?: StaffUserOrderByWithRelationInput | StaffUserOrderByWithRelationInput[]
    cursor?: StaffUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffUserScalarFieldEnum | StaffUserScalarFieldEnum[]
  }

  /**
   * Department.ticket_history
   */
  export type Department$ticket_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    where?: TicketHistoryWhereInput
    orderBy?: TicketHistoryOrderByWithRelationInput | TicketHistoryOrderByWithRelationInput[]
    cursor?: TicketHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketHistoryScalarFieldEnum | TicketHistoryScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model StaffUser
   */

  export type AggregateStaffUser = {
    _count: StaffUserCountAggregateOutputType | null
    _avg: StaffUserAvgAggregateOutputType | null
    _sum: StaffUserSumAggregateOutputType | null
    _min: StaffUserMinAggregateOutputType | null
    _max: StaffUserMaxAggregateOutputType | null
  }

  export type StaffUserAvgAggregateOutputType = {
    id: number | null
    department_id: number | null
  }

  export type StaffUserSumAggregateOutputType = {
    id: number | null
    department_id: number | null
  }

  export type StaffUserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: string | null
    department_id: number | null
    active: boolean | null
    created_at: Date | null
    reset_token: string | null
    reset_token_expires: Date | null
  }

  export type StaffUserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: string | null
    department_id: number | null
    active: boolean | null
    created_at: Date | null
    reset_token: string | null
    reset_token_expires: Date | null
  }

  export type StaffUserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    department_id: number
    active: number
    created_at: number
    reset_token: number
    reset_token_expires: number
    _all: number
  }


  export type StaffUserAvgAggregateInputType = {
    id?: true
    department_id?: true
  }

  export type StaffUserSumAggregateInputType = {
    id?: true
    department_id?: true
  }

  export type StaffUserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    department_id?: true
    active?: true
    created_at?: true
    reset_token?: true
    reset_token_expires?: true
  }

  export type StaffUserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    department_id?: true
    active?: true
    created_at?: true
    reset_token?: true
    reset_token_expires?: true
  }

  export type StaffUserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    department_id?: true
    active?: true
    created_at?: true
    reset_token?: true
    reset_token_expires?: true
    _all?: true
  }

  export type StaffUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffUser to aggregate.
     */
    where?: StaffUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffUsers to fetch.
     */
    orderBy?: StaffUserOrderByWithRelationInput | StaffUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffUsers
    **/
    _count?: true | StaffUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffUserMaxAggregateInputType
  }

  export type GetStaffUserAggregateType<T extends StaffUserAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffUser[P]>
      : GetScalarType<T[P], AggregateStaffUser[P]>
  }




  export type StaffUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffUserWhereInput
    orderBy?: StaffUserOrderByWithAggregationInput | StaffUserOrderByWithAggregationInput[]
    by: StaffUserScalarFieldEnum[] | StaffUserScalarFieldEnum
    having?: StaffUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffUserCountAggregateInputType | true
    _avg?: StaffUserAvgAggregateInputType
    _sum?: StaffUserSumAggregateInputType
    _min?: StaffUserMinAggregateInputType
    _max?: StaffUserMaxAggregateInputType
  }

  export type StaffUserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    role: string
    department_id: number | null
    active: boolean
    created_at: Date
    reset_token: string | null
    reset_token_expires: Date | null
    _count: StaffUserCountAggregateOutputType | null
    _avg: StaffUserAvgAggregateOutputType | null
    _sum: StaffUserSumAggregateOutputType | null
    _min: StaffUserMinAggregateOutputType | null
    _max: StaffUserMaxAggregateOutputType | null
  }

  type GetStaffUserGroupByPayload<T extends StaffUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffUserGroupByOutputType[P]>
            : GetScalarType<T[P], StaffUserGroupByOutputType[P]>
        }
      >
    >


  export type StaffUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    department_id?: boolean
    active?: boolean
    created_at?: boolean
    reset_token?: boolean
    reset_token_expires?: boolean
    department?: boolean | StaffUser$departmentArgs<ExtArgs>
    served_tickets?: boolean | StaffUser$served_ticketsArgs<ExtArgs>
    ticket_logs?: boolean | StaffUser$ticket_logsArgs<ExtArgs>
    ticket_history?: boolean | StaffUser$ticket_historyArgs<ExtArgs>
    _count?: boolean | StaffUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffUser"]>

  export type StaffUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    department_id?: boolean
    active?: boolean
    created_at?: boolean
    reset_token?: boolean
    reset_token_expires?: boolean
    department?: boolean | StaffUser$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["staffUser"]>

  export type StaffUserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    department_id?: boolean
    active?: boolean
    created_at?: boolean
    reset_token?: boolean
    reset_token_expires?: boolean
  }

  export type StaffUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | StaffUser$departmentArgs<ExtArgs>
    served_tickets?: boolean | StaffUser$served_ticketsArgs<ExtArgs>
    ticket_logs?: boolean | StaffUser$ticket_logsArgs<ExtArgs>
    ticket_history?: boolean | StaffUser$ticket_historyArgs<ExtArgs>
    _count?: boolean | StaffUserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StaffUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | StaffUser$departmentArgs<ExtArgs>
  }

  export type $StaffUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffUser"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      served_tickets: Prisma.$TicketPayload<ExtArgs>[]
      ticket_logs: Prisma.$TicketLogPayload<ExtArgs>[]
      ticket_history: Prisma.$TicketHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      role: string
      department_id: number | null
      active: boolean
      created_at: Date
      reset_token: string | null
      reset_token_expires: Date | null
    }, ExtArgs["result"]["staffUser"]>
    composites: {}
  }

  type StaffUserGetPayload<S extends boolean | null | undefined | StaffUserDefaultArgs> = $Result.GetResult<Prisma.$StaffUserPayload, S>

  type StaffUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StaffUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StaffUserCountAggregateInputType | true
    }

  export interface StaffUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffUser'], meta: { name: 'StaffUser' } }
    /**
     * Find zero or one StaffUser that matches the filter.
     * @param {StaffUserFindUniqueArgs} args - Arguments to find a StaffUser
     * @example
     * // Get one StaffUser
     * const staffUser = await prisma.staffUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffUserFindUniqueArgs>(args: SelectSubset<T, StaffUserFindUniqueArgs<ExtArgs>>): Prisma__StaffUserClient<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StaffUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StaffUserFindUniqueOrThrowArgs} args - Arguments to find a StaffUser
     * @example
     * // Get one StaffUser
     * const staffUser = await prisma.staffUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffUserFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffUserClient<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StaffUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUserFindFirstArgs} args - Arguments to find a StaffUser
     * @example
     * // Get one StaffUser
     * const staffUser = await prisma.staffUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffUserFindFirstArgs>(args?: SelectSubset<T, StaffUserFindFirstArgs<ExtArgs>>): Prisma__StaffUserClient<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StaffUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUserFindFirstOrThrowArgs} args - Arguments to find a StaffUser
     * @example
     * // Get one StaffUser
     * const staffUser = await prisma.staffUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffUserFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffUserClient<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StaffUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffUsers
     * const staffUsers = await prisma.staffUser.findMany()
     * 
     * // Get first 10 StaffUsers
     * const staffUsers = await prisma.staffUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffUserWithIdOnly = await prisma.staffUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffUserFindManyArgs>(args?: SelectSubset<T, StaffUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StaffUser.
     * @param {StaffUserCreateArgs} args - Arguments to create a StaffUser.
     * @example
     * // Create one StaffUser
     * const StaffUser = await prisma.staffUser.create({
     *   data: {
     *     // ... data to create a StaffUser
     *   }
     * })
     * 
     */
    create<T extends StaffUserCreateArgs>(args: SelectSubset<T, StaffUserCreateArgs<ExtArgs>>): Prisma__StaffUserClient<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StaffUsers.
     * @param {StaffUserCreateManyArgs} args - Arguments to create many StaffUsers.
     * @example
     * // Create many StaffUsers
     * const staffUser = await prisma.staffUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffUserCreateManyArgs>(args?: SelectSubset<T, StaffUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaffUsers and returns the data saved in the database.
     * @param {StaffUserCreateManyAndReturnArgs} args - Arguments to create many StaffUsers.
     * @example
     * // Create many StaffUsers
     * const staffUser = await prisma.staffUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaffUsers and only return the `id`
     * const staffUserWithIdOnly = await prisma.staffUser.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffUserCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StaffUser.
     * @param {StaffUserDeleteArgs} args - Arguments to delete one StaffUser.
     * @example
     * // Delete one StaffUser
     * const StaffUser = await prisma.staffUser.delete({
     *   where: {
     *     // ... filter to delete one StaffUser
     *   }
     * })
     * 
     */
    delete<T extends StaffUserDeleteArgs>(args: SelectSubset<T, StaffUserDeleteArgs<ExtArgs>>): Prisma__StaffUserClient<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StaffUser.
     * @param {StaffUserUpdateArgs} args - Arguments to update one StaffUser.
     * @example
     * // Update one StaffUser
     * const staffUser = await prisma.staffUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffUserUpdateArgs>(args: SelectSubset<T, StaffUserUpdateArgs<ExtArgs>>): Prisma__StaffUserClient<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StaffUsers.
     * @param {StaffUserDeleteManyArgs} args - Arguments to filter StaffUsers to delete.
     * @example
     * // Delete a few StaffUsers
     * const { count } = await prisma.staffUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffUserDeleteManyArgs>(args?: SelectSubset<T, StaffUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffUsers
     * const staffUser = await prisma.staffUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffUserUpdateManyArgs>(args: SelectSubset<T, StaffUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StaffUser.
     * @param {StaffUserUpsertArgs} args - Arguments to update or create a StaffUser.
     * @example
     * // Update or create a StaffUser
     * const staffUser = await prisma.staffUser.upsert({
     *   create: {
     *     // ... data to create a StaffUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffUser we want to update
     *   }
     * })
     */
    upsert<T extends StaffUserUpsertArgs>(args: SelectSubset<T, StaffUserUpsertArgs<ExtArgs>>): Prisma__StaffUserClient<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StaffUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUserCountArgs} args - Arguments to filter StaffUsers to count.
     * @example
     * // Count the number of StaffUsers
     * const count = await prisma.staffUser.count({
     *   where: {
     *     // ... the filter for the StaffUsers we want to count
     *   }
     * })
    **/
    count<T extends StaffUserCountArgs>(
      args?: Subset<T, StaffUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffUserAggregateArgs>(args: Subset<T, StaffUserAggregateArgs>): Prisma.PrismaPromise<GetStaffUserAggregateType<T>>

    /**
     * Group by StaffUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffUserGroupByArgs['orderBy'] }
        : { orderBy?: StaffUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffUser model
   */
  readonly fields: StaffUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends StaffUser$departmentArgs<ExtArgs> = {}>(args?: Subset<T, StaffUser$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    served_tickets<T extends StaffUser$served_ticketsArgs<ExtArgs> = {}>(args?: Subset<T, StaffUser$served_ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    ticket_logs<T extends StaffUser$ticket_logsArgs<ExtArgs> = {}>(args?: Subset<T, StaffUser$ticket_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "findMany"> | Null>
    ticket_history<T extends StaffUser$ticket_historyArgs<ExtArgs> = {}>(args?: Subset<T, StaffUser$ticket_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffUser model
   */ 
  interface StaffUserFieldRefs {
    readonly id: FieldRef<"StaffUser", 'Int'>
    readonly name: FieldRef<"StaffUser", 'String'>
    readonly email: FieldRef<"StaffUser", 'String'>
    readonly password: FieldRef<"StaffUser", 'String'>
    readonly role: FieldRef<"StaffUser", 'String'>
    readonly department_id: FieldRef<"StaffUser", 'Int'>
    readonly active: FieldRef<"StaffUser", 'Boolean'>
    readonly created_at: FieldRef<"StaffUser", 'DateTime'>
    readonly reset_token: FieldRef<"StaffUser", 'String'>
    readonly reset_token_expires: FieldRef<"StaffUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StaffUser findUnique
   */
  export type StaffUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    /**
     * Filter, which StaffUser to fetch.
     */
    where: StaffUserWhereUniqueInput
  }

  /**
   * StaffUser findUniqueOrThrow
   */
  export type StaffUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    /**
     * Filter, which StaffUser to fetch.
     */
    where: StaffUserWhereUniqueInput
  }

  /**
   * StaffUser findFirst
   */
  export type StaffUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    /**
     * Filter, which StaffUser to fetch.
     */
    where?: StaffUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffUsers to fetch.
     */
    orderBy?: StaffUserOrderByWithRelationInput | StaffUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffUsers.
     */
    cursor?: StaffUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffUsers.
     */
    distinct?: StaffUserScalarFieldEnum | StaffUserScalarFieldEnum[]
  }

  /**
   * StaffUser findFirstOrThrow
   */
  export type StaffUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    /**
     * Filter, which StaffUser to fetch.
     */
    where?: StaffUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffUsers to fetch.
     */
    orderBy?: StaffUserOrderByWithRelationInput | StaffUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffUsers.
     */
    cursor?: StaffUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffUsers.
     */
    distinct?: StaffUserScalarFieldEnum | StaffUserScalarFieldEnum[]
  }

  /**
   * StaffUser findMany
   */
  export type StaffUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    /**
     * Filter, which StaffUsers to fetch.
     */
    where?: StaffUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffUsers to fetch.
     */
    orderBy?: StaffUserOrderByWithRelationInput | StaffUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffUsers.
     */
    cursor?: StaffUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffUsers.
     */
    skip?: number
    distinct?: StaffUserScalarFieldEnum | StaffUserScalarFieldEnum[]
  }

  /**
   * StaffUser create
   */
  export type StaffUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffUser.
     */
    data: XOR<StaffUserCreateInput, StaffUserUncheckedCreateInput>
  }

  /**
   * StaffUser createMany
   */
  export type StaffUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffUsers.
     */
    data: StaffUserCreateManyInput | StaffUserCreateManyInput[]
  }

  /**
   * StaffUser createManyAndReturn
   */
  export type StaffUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StaffUsers.
     */
    data: StaffUserCreateManyInput | StaffUserCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffUser update
   */
  export type StaffUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffUser.
     */
    data: XOR<StaffUserUpdateInput, StaffUserUncheckedUpdateInput>
    /**
     * Choose, which StaffUser to update.
     */
    where: StaffUserWhereUniqueInput
  }

  /**
   * StaffUser updateMany
   */
  export type StaffUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffUsers.
     */
    data: XOR<StaffUserUpdateManyMutationInput, StaffUserUncheckedUpdateManyInput>
    /**
     * Filter which StaffUsers to update
     */
    where?: StaffUserWhereInput
  }

  /**
   * StaffUser upsert
   */
  export type StaffUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffUser to update in case it exists.
     */
    where: StaffUserWhereUniqueInput
    /**
     * In case the StaffUser found by the `where` argument doesn't exist, create a new StaffUser with this data.
     */
    create: XOR<StaffUserCreateInput, StaffUserUncheckedCreateInput>
    /**
     * In case the StaffUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffUserUpdateInput, StaffUserUncheckedUpdateInput>
  }

  /**
   * StaffUser delete
   */
  export type StaffUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    /**
     * Filter which StaffUser to delete.
     */
    where: StaffUserWhereUniqueInput
  }

  /**
   * StaffUser deleteMany
   */
  export type StaffUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffUsers to delete
     */
    where?: StaffUserWhereInput
  }

  /**
   * StaffUser.department
   */
  export type StaffUser$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * StaffUser.served_tickets
   */
  export type StaffUser$served_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * StaffUser.ticket_logs
   */
  export type StaffUser$ticket_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
    where?: TicketLogWhereInput
    orderBy?: TicketLogOrderByWithRelationInput | TicketLogOrderByWithRelationInput[]
    cursor?: TicketLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketLogScalarFieldEnum | TicketLogScalarFieldEnum[]
  }

  /**
   * StaffUser.ticket_history
   */
  export type StaffUser$ticket_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    where?: TicketHistoryWhereInput
    orderBy?: TicketHistoryOrderByWithRelationInput | TicketHistoryOrderByWithRelationInput[]
    cursor?: TicketHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketHistoryScalarFieldEnum | TicketHistoryScalarFieldEnum[]
  }

  /**
   * StaffUser without action
   */
  export type StaffUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
  }


  /**
   * Model Ticket
   */

  export type AggregateTicket = {
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  export type TicketAvgAggregateOutputType = {
    id: number | null
    patient_id: number | null
    department_id: number | null
    forwarded_from: number | null
    priority: number | null
    served_by: number | null
  }

  export type TicketSumAggregateOutputType = {
    id: number | null
    patient_id: number | null
    department_id: number | null
    forwarded_from: number | null
    priority: number | null
    served_by: number | null
  }

  export type TicketMinAggregateOutputType = {
    id: number | null
    ticket_no: string | null
    original_ticket_no: string | null
    patient_id: number | null
    department_id: number | null
    status: string | null
    forwarded_from: number | null
    priority: number | null
    created_at: Date | null
    served_at: Date | null
    served_by: number | null
  }

  export type TicketMaxAggregateOutputType = {
    id: number | null
    ticket_no: string | null
    original_ticket_no: string | null
    patient_id: number | null
    department_id: number | null
    status: string | null
    forwarded_from: number | null
    priority: number | null
    created_at: Date | null
    served_at: Date | null
    served_by: number | null
  }

  export type TicketCountAggregateOutputType = {
    id: number
    ticket_no: number
    original_ticket_no: number
    patient_id: number
    department_id: number
    status: number
    forwarded_from: number
    priority: number
    created_at: number
    served_at: number
    served_by: number
    _all: number
  }


  export type TicketAvgAggregateInputType = {
    id?: true
    patient_id?: true
    department_id?: true
    forwarded_from?: true
    priority?: true
    served_by?: true
  }

  export type TicketSumAggregateInputType = {
    id?: true
    patient_id?: true
    department_id?: true
    forwarded_from?: true
    priority?: true
    served_by?: true
  }

  export type TicketMinAggregateInputType = {
    id?: true
    ticket_no?: true
    original_ticket_no?: true
    patient_id?: true
    department_id?: true
    status?: true
    forwarded_from?: true
    priority?: true
    created_at?: true
    served_at?: true
    served_by?: true
  }

  export type TicketMaxAggregateInputType = {
    id?: true
    ticket_no?: true
    original_ticket_no?: true
    patient_id?: true
    department_id?: true
    status?: true
    forwarded_from?: true
    priority?: true
    created_at?: true
    served_at?: true
    served_by?: true
  }

  export type TicketCountAggregateInputType = {
    id?: true
    ticket_no?: true
    original_ticket_no?: true
    patient_id?: true
    department_id?: true
    status?: true
    forwarded_from?: true
    priority?: true
    created_at?: true
    served_at?: true
    served_by?: true
    _all?: true
  }

  export type TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticket to aggregate.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketMaxAggregateInputType
  }

  export type GetTicketAggregateType<T extends TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket[P]>
      : GetScalarType<T[P], AggregateTicket[P]>
  }




  export type TicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithAggregationInput | TicketOrderByWithAggregationInput[]
    by: TicketScalarFieldEnum[] | TicketScalarFieldEnum
    having?: TicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketCountAggregateInputType | true
    _avg?: TicketAvgAggregateInputType
    _sum?: TicketSumAggregateInputType
    _min?: TicketMinAggregateInputType
    _max?: TicketMaxAggregateInputType
  }

  export type TicketGroupByOutputType = {
    id: number
    ticket_no: string
    original_ticket_no: string | null
    patient_id: number
    department_id: number
    status: string
    forwarded_from: number | null
    priority: number
    created_at: Date
    served_at: Date | null
    served_by: number | null
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  type GetTicketGroupByPayload<T extends TicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketGroupByOutputType[P]>
            : GetScalarType<T[P], TicketGroupByOutputType[P]>
        }
      >
    >


  export type TicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticket_no?: boolean
    original_ticket_no?: boolean
    patient_id?: boolean
    department_id?: boolean
    status?: boolean
    forwarded_from?: boolean
    priority?: boolean
    created_at?: boolean
    served_at?: boolean
    served_by?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    served_by_user?: boolean | Ticket$served_by_userArgs<ExtArgs>
    ticket_logs?: boolean | Ticket$ticket_logsArgs<ExtArgs>
    ticket_history?: boolean | Ticket$ticket_historyArgs<ExtArgs>
    _count?: boolean | TicketCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticket_no?: boolean
    original_ticket_no?: boolean
    patient_id?: boolean
    department_id?: boolean
    status?: boolean
    forwarded_from?: boolean
    priority?: boolean
    created_at?: boolean
    served_at?: boolean
    served_by?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    served_by_user?: boolean | Ticket$served_by_userArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectScalar = {
    id?: boolean
    ticket_no?: boolean
    original_ticket_no?: boolean
    patient_id?: boolean
    department_id?: boolean
    status?: boolean
    forwarded_from?: boolean
    priority?: boolean
    created_at?: boolean
    served_at?: boolean
    served_by?: boolean
  }

  export type TicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    served_by_user?: boolean | Ticket$served_by_userArgs<ExtArgs>
    ticket_logs?: boolean | Ticket$ticket_logsArgs<ExtArgs>
    ticket_history?: boolean | Ticket$ticket_historyArgs<ExtArgs>
    _count?: boolean | TicketCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    served_by_user?: boolean | Ticket$served_by_userArgs<ExtArgs>
  }

  export type $TicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ticket"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
      served_by_user: Prisma.$StaffUserPayload<ExtArgs> | null
      ticket_logs: Prisma.$TicketLogPayload<ExtArgs>[]
      ticket_history: Prisma.$TicketHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ticket_no: string
      original_ticket_no: string | null
      patient_id: number
      department_id: number
      status: string
      forwarded_from: number | null
      priority: number
      created_at: Date
      served_at: Date | null
      served_by: number | null
    }, ExtArgs["result"]["ticket"]>
    composites: {}
  }

  type TicketGetPayload<S extends boolean | null | undefined | TicketDefaultArgs> = $Result.GetResult<Prisma.$TicketPayload, S>

  type TicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketCountAggregateInputType | true
    }

  export interface TicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ticket'], meta: { name: 'Ticket' } }
    /**
     * Find zero or one Ticket that matches the filter.
     * @param {TicketFindUniqueArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketFindUniqueArgs>(args: SelectSubset<T, TicketFindUniqueArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ticket that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketFindUniqueOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketFindFirstArgs>(args?: SelectSubset<T, TicketFindFirstArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.ticket.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.ticket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketWithIdOnly = await prisma.ticket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TicketFindManyArgs>(args?: SelectSubset<T, TicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ticket.
     * @param {TicketCreateArgs} args - Arguments to create a Ticket.
     * @example
     * // Create one Ticket
     * const Ticket = await prisma.ticket.create({
     *   data: {
     *     // ... data to create a Ticket
     *   }
     * })
     * 
     */
    create<T extends TicketCreateArgs>(args: SelectSubset<T, TicketCreateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tickets.
     * @param {TicketCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketCreateManyArgs>(args?: SelectSubset<T, TicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tickets and returns the data saved in the database.
     * @param {TicketCreateManyAndReturnArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tickets and only return the `id`
     * const ticketWithIdOnly = await prisma.ticket.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ticket.
     * @param {TicketDeleteArgs} args - Arguments to delete one Ticket.
     * @example
     * // Delete one Ticket
     * const Ticket = await prisma.ticket.delete({
     *   where: {
     *     // ... filter to delete one Ticket
     *   }
     * })
     * 
     */
    delete<T extends TicketDeleteArgs>(args: SelectSubset<T, TicketDeleteArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ticket.
     * @param {TicketUpdateArgs} args - Arguments to update one Ticket.
     * @example
     * // Update one Ticket
     * const ticket = await prisma.ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketUpdateArgs>(args: SelectSubset<T, TicketUpdateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tickets.
     * @param {TicketDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketDeleteManyArgs>(args?: SelectSubset<T, TicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketUpdateManyArgs>(args: SelectSubset<T, TicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticket.
     * @param {TicketUpsertArgs} args - Arguments to update or create a Ticket.
     * @example
     * // Update or create a Ticket
     * const ticket = await prisma.ticket.upsert({
     *   create: {
     *     // ... data to create a Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket we want to update
     *   }
     * })
     */
    upsert<T extends TicketUpsertArgs>(args: SelectSubset<T, TicketUpsertArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.ticket.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketCountArgs>(
      args?: Subset<T, TicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketAggregateArgs>(args: Subset<T, TicketAggregateArgs>): Prisma.PrismaPromise<GetTicketAggregateType<T>>

    /**
     * Group by Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketGroupByArgs['orderBy'] }
        : { orderBy?: TicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ticket model
   */
  readonly fields: TicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    served_by_user<T extends Ticket$served_by_userArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$served_by_userArgs<ExtArgs>>): Prisma__StaffUserClient<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    ticket_logs<T extends Ticket$ticket_logsArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$ticket_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "findMany"> | Null>
    ticket_history<T extends Ticket$ticket_historyArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$ticket_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ticket model
   */ 
  interface TicketFieldRefs {
    readonly id: FieldRef<"Ticket", 'Int'>
    readonly ticket_no: FieldRef<"Ticket", 'String'>
    readonly original_ticket_no: FieldRef<"Ticket", 'String'>
    readonly patient_id: FieldRef<"Ticket", 'Int'>
    readonly department_id: FieldRef<"Ticket", 'Int'>
    readonly status: FieldRef<"Ticket", 'String'>
    readonly forwarded_from: FieldRef<"Ticket", 'Int'>
    readonly priority: FieldRef<"Ticket", 'Int'>
    readonly created_at: FieldRef<"Ticket", 'DateTime'>
    readonly served_at: FieldRef<"Ticket", 'DateTime'>
    readonly served_by: FieldRef<"Ticket", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Ticket findUnique
   */
  export type TicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findUniqueOrThrow
   */
  export type TicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findFirst
   */
  export type TicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findFirstOrThrow
   */
  export type TicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findMany
   */
  export type TicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket create
   */
  export type TicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to create a Ticket.
     */
    data: XOR<TicketCreateInput, TicketUncheckedCreateInput>
  }

  /**
   * Ticket createMany
   */
  export type TicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tickets.
     */
    data: TicketCreateManyInput | TicketCreateManyInput[]
  }

  /**
   * Ticket createManyAndReturn
   */
  export type TicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tickets.
     */
    data: TicketCreateManyInput | TicketCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ticket update
   */
  export type TicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to update a Ticket.
     */
    data: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
    /**
     * Choose, which Ticket to update.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket updateMany
   */
  export type TicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketWhereInput
  }

  /**
   * Ticket upsert
   */
  export type TicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The filter to search for the Ticket to update in case it exists.
     */
    where: TicketWhereUniqueInput
    /**
     * In case the Ticket found by the `where` argument doesn't exist, create a new Ticket with this data.
     */
    create: XOR<TicketCreateInput, TicketUncheckedCreateInput>
    /**
     * In case the Ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
  }

  /**
   * Ticket delete
   */
  export type TicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter which Ticket to delete.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket deleteMany
   */
  export type TicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to delete
     */
    where?: TicketWhereInput
  }

  /**
   * Ticket.served_by_user
   */
  export type Ticket$served_by_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    where?: StaffUserWhereInput
  }

  /**
   * Ticket.ticket_logs
   */
  export type Ticket$ticket_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
    where?: TicketLogWhereInput
    orderBy?: TicketLogOrderByWithRelationInput | TicketLogOrderByWithRelationInput[]
    cursor?: TicketLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketLogScalarFieldEnum | TicketLogScalarFieldEnum[]
  }

  /**
   * Ticket.ticket_history
   */
  export type Ticket$ticket_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    where?: TicketHistoryWhereInput
    orderBy?: TicketHistoryOrderByWithRelationInput | TicketHistoryOrderByWithRelationInput[]
    cursor?: TicketHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketHistoryScalarFieldEnum | TicketHistoryScalarFieldEnum[]
  }

  /**
   * Ticket without action
   */
  export type TicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
  }


  /**
   * Model TicketLog
   */

  export type AggregateTicketLog = {
    _count: TicketLogCountAggregateOutputType | null
    _avg: TicketLogAvgAggregateOutputType | null
    _sum: TicketLogSumAggregateOutputType | null
    _min: TicketLogMinAggregateOutputType | null
    _max: TicketLogMaxAggregateOutputType | null
  }

  export type TicketLogAvgAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    performed_by: number | null
  }

  export type TicketLogSumAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    performed_by: number | null
  }

  export type TicketLogMinAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    action: string | null
    performed_by: number | null
    notes: string | null
    created_at: Date | null
  }

  export type TicketLogMaxAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    action: string | null
    performed_by: number | null
    notes: string | null
    created_at: Date | null
  }

  export type TicketLogCountAggregateOutputType = {
    id: number
    ticket_id: number
    action: number
    performed_by: number
    notes: number
    created_at: number
    _all: number
  }


  export type TicketLogAvgAggregateInputType = {
    id?: true
    ticket_id?: true
    performed_by?: true
  }

  export type TicketLogSumAggregateInputType = {
    id?: true
    ticket_id?: true
    performed_by?: true
  }

  export type TicketLogMinAggregateInputType = {
    id?: true
    ticket_id?: true
    action?: true
    performed_by?: true
    notes?: true
    created_at?: true
  }

  export type TicketLogMaxAggregateInputType = {
    id?: true
    ticket_id?: true
    action?: true
    performed_by?: true
    notes?: true
    created_at?: true
  }

  export type TicketLogCountAggregateInputType = {
    id?: true
    ticket_id?: true
    action?: true
    performed_by?: true
    notes?: true
    created_at?: true
    _all?: true
  }

  export type TicketLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketLog to aggregate.
     */
    where?: TicketLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketLogs to fetch.
     */
    orderBy?: TicketLogOrderByWithRelationInput | TicketLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TicketLogs
    **/
    _count?: true | TicketLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketLogMaxAggregateInputType
  }

  export type GetTicketLogAggregateType<T extends TicketLogAggregateArgs> = {
        [P in keyof T & keyof AggregateTicketLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicketLog[P]>
      : GetScalarType<T[P], AggregateTicketLog[P]>
  }




  export type TicketLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketLogWhereInput
    orderBy?: TicketLogOrderByWithAggregationInput | TicketLogOrderByWithAggregationInput[]
    by: TicketLogScalarFieldEnum[] | TicketLogScalarFieldEnum
    having?: TicketLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketLogCountAggregateInputType | true
    _avg?: TicketLogAvgAggregateInputType
    _sum?: TicketLogSumAggregateInputType
    _min?: TicketLogMinAggregateInputType
    _max?: TicketLogMaxAggregateInputType
  }

  export type TicketLogGroupByOutputType = {
    id: number
    ticket_id: number
    action: string
    performed_by: number
    notes: string | null
    created_at: Date
    _count: TicketLogCountAggregateOutputType | null
    _avg: TicketLogAvgAggregateOutputType | null
    _sum: TicketLogSumAggregateOutputType | null
    _min: TicketLogMinAggregateOutputType | null
    _max: TicketLogMaxAggregateOutputType | null
  }

  type GetTicketLogGroupByPayload<T extends TicketLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketLogGroupByOutputType[P]>
            : GetScalarType<T[P], TicketLogGroupByOutputType[P]>
        }
      >
    >


  export type TicketLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticket_id?: boolean
    action?: boolean
    performed_by?: boolean
    notes?: boolean
    created_at?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    staff_user?: boolean | StaffUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticketLog"]>

  export type TicketLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticket_id?: boolean
    action?: boolean
    performed_by?: boolean
    notes?: boolean
    created_at?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    staff_user?: boolean | StaffUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticketLog"]>

  export type TicketLogSelectScalar = {
    id?: boolean
    ticket_id?: boolean
    action?: boolean
    performed_by?: boolean
    notes?: boolean
    created_at?: boolean
  }

  export type TicketLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    staff_user?: boolean | StaffUserDefaultArgs<ExtArgs>
  }
  export type TicketLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    staff_user?: boolean | StaffUserDefaultArgs<ExtArgs>
  }

  export type $TicketLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TicketLog"
    objects: {
      ticket: Prisma.$TicketPayload<ExtArgs>
      staff_user: Prisma.$StaffUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ticket_id: number
      action: string
      performed_by: number
      notes: string | null
      created_at: Date
    }, ExtArgs["result"]["ticketLog"]>
    composites: {}
  }

  type TicketLogGetPayload<S extends boolean | null | undefined | TicketLogDefaultArgs> = $Result.GetResult<Prisma.$TicketLogPayload, S>

  type TicketLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketLogCountAggregateInputType | true
    }

  export interface TicketLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TicketLog'], meta: { name: 'TicketLog' } }
    /**
     * Find zero or one TicketLog that matches the filter.
     * @param {TicketLogFindUniqueArgs} args - Arguments to find a TicketLog
     * @example
     * // Get one TicketLog
     * const ticketLog = await prisma.ticketLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketLogFindUniqueArgs>(args: SelectSubset<T, TicketLogFindUniqueArgs<ExtArgs>>): Prisma__TicketLogClient<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TicketLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketLogFindUniqueOrThrowArgs} args - Arguments to find a TicketLog
     * @example
     * // Get one TicketLog
     * const ticketLog = await prisma.ticketLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketLogFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketLogClient<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TicketLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketLogFindFirstArgs} args - Arguments to find a TicketLog
     * @example
     * // Get one TicketLog
     * const ticketLog = await prisma.ticketLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketLogFindFirstArgs>(args?: SelectSubset<T, TicketLogFindFirstArgs<ExtArgs>>): Prisma__TicketLogClient<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TicketLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketLogFindFirstOrThrowArgs} args - Arguments to find a TicketLog
     * @example
     * // Get one TicketLog
     * const ticketLog = await prisma.ticketLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketLogFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketLogClient<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TicketLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TicketLogs
     * const ticketLogs = await prisma.ticketLog.findMany()
     * 
     * // Get first 10 TicketLogs
     * const ticketLogs = await prisma.ticketLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketLogWithIdOnly = await prisma.ticketLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TicketLogFindManyArgs>(args?: SelectSubset<T, TicketLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TicketLog.
     * @param {TicketLogCreateArgs} args - Arguments to create a TicketLog.
     * @example
     * // Create one TicketLog
     * const TicketLog = await prisma.ticketLog.create({
     *   data: {
     *     // ... data to create a TicketLog
     *   }
     * })
     * 
     */
    create<T extends TicketLogCreateArgs>(args: SelectSubset<T, TicketLogCreateArgs<ExtArgs>>): Prisma__TicketLogClient<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TicketLogs.
     * @param {TicketLogCreateManyArgs} args - Arguments to create many TicketLogs.
     * @example
     * // Create many TicketLogs
     * const ticketLog = await prisma.ticketLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketLogCreateManyArgs>(args?: SelectSubset<T, TicketLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TicketLogs and returns the data saved in the database.
     * @param {TicketLogCreateManyAndReturnArgs} args - Arguments to create many TicketLogs.
     * @example
     * // Create many TicketLogs
     * const ticketLog = await prisma.ticketLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TicketLogs and only return the `id`
     * const ticketLogWithIdOnly = await prisma.ticketLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketLogCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TicketLog.
     * @param {TicketLogDeleteArgs} args - Arguments to delete one TicketLog.
     * @example
     * // Delete one TicketLog
     * const TicketLog = await prisma.ticketLog.delete({
     *   where: {
     *     // ... filter to delete one TicketLog
     *   }
     * })
     * 
     */
    delete<T extends TicketLogDeleteArgs>(args: SelectSubset<T, TicketLogDeleteArgs<ExtArgs>>): Prisma__TicketLogClient<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TicketLog.
     * @param {TicketLogUpdateArgs} args - Arguments to update one TicketLog.
     * @example
     * // Update one TicketLog
     * const ticketLog = await prisma.ticketLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketLogUpdateArgs>(args: SelectSubset<T, TicketLogUpdateArgs<ExtArgs>>): Prisma__TicketLogClient<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TicketLogs.
     * @param {TicketLogDeleteManyArgs} args - Arguments to filter TicketLogs to delete.
     * @example
     * // Delete a few TicketLogs
     * const { count } = await prisma.ticketLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketLogDeleteManyArgs>(args?: SelectSubset<T, TicketLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TicketLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TicketLogs
     * const ticketLog = await prisma.ticketLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketLogUpdateManyArgs>(args: SelectSubset<T, TicketLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TicketLog.
     * @param {TicketLogUpsertArgs} args - Arguments to update or create a TicketLog.
     * @example
     * // Update or create a TicketLog
     * const ticketLog = await prisma.ticketLog.upsert({
     *   create: {
     *     // ... data to create a TicketLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TicketLog we want to update
     *   }
     * })
     */
    upsert<T extends TicketLogUpsertArgs>(args: SelectSubset<T, TicketLogUpsertArgs<ExtArgs>>): Prisma__TicketLogClient<$Result.GetResult<Prisma.$TicketLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TicketLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketLogCountArgs} args - Arguments to filter TicketLogs to count.
     * @example
     * // Count the number of TicketLogs
     * const count = await prisma.ticketLog.count({
     *   where: {
     *     // ... the filter for the TicketLogs we want to count
     *   }
     * })
    **/
    count<T extends TicketLogCountArgs>(
      args?: Subset<T, TicketLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TicketLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketLogAggregateArgs>(args: Subset<T, TicketLogAggregateArgs>): Prisma.PrismaPromise<GetTicketLogAggregateType<T>>

    /**
     * Group by TicketLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketLogGroupByArgs['orderBy'] }
        : { orderBy?: TicketLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TicketLog model
   */
  readonly fields: TicketLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TicketLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    staff_user<T extends StaffUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffUserDefaultArgs<ExtArgs>>): Prisma__StaffUserClient<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TicketLog model
   */ 
  interface TicketLogFieldRefs {
    readonly id: FieldRef<"TicketLog", 'Int'>
    readonly ticket_id: FieldRef<"TicketLog", 'Int'>
    readonly action: FieldRef<"TicketLog", 'String'>
    readonly performed_by: FieldRef<"TicketLog", 'Int'>
    readonly notes: FieldRef<"TicketLog", 'String'>
    readonly created_at: FieldRef<"TicketLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TicketLog findUnique
   */
  export type TicketLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
    /**
     * Filter, which TicketLog to fetch.
     */
    where: TicketLogWhereUniqueInput
  }

  /**
   * TicketLog findUniqueOrThrow
   */
  export type TicketLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
    /**
     * Filter, which TicketLog to fetch.
     */
    where: TicketLogWhereUniqueInput
  }

  /**
   * TicketLog findFirst
   */
  export type TicketLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
    /**
     * Filter, which TicketLog to fetch.
     */
    where?: TicketLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketLogs to fetch.
     */
    orderBy?: TicketLogOrderByWithRelationInput | TicketLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketLogs.
     */
    cursor?: TicketLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketLogs.
     */
    distinct?: TicketLogScalarFieldEnum | TicketLogScalarFieldEnum[]
  }

  /**
   * TicketLog findFirstOrThrow
   */
  export type TicketLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
    /**
     * Filter, which TicketLog to fetch.
     */
    where?: TicketLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketLogs to fetch.
     */
    orderBy?: TicketLogOrderByWithRelationInput | TicketLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketLogs.
     */
    cursor?: TicketLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketLogs.
     */
    distinct?: TicketLogScalarFieldEnum | TicketLogScalarFieldEnum[]
  }

  /**
   * TicketLog findMany
   */
  export type TicketLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
    /**
     * Filter, which TicketLogs to fetch.
     */
    where?: TicketLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketLogs to fetch.
     */
    orderBy?: TicketLogOrderByWithRelationInput | TicketLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TicketLogs.
     */
    cursor?: TicketLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketLogs.
     */
    skip?: number
    distinct?: TicketLogScalarFieldEnum | TicketLogScalarFieldEnum[]
  }

  /**
   * TicketLog create
   */
  export type TicketLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
    /**
     * The data needed to create a TicketLog.
     */
    data: XOR<TicketLogCreateInput, TicketLogUncheckedCreateInput>
  }

  /**
   * TicketLog createMany
   */
  export type TicketLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TicketLogs.
     */
    data: TicketLogCreateManyInput | TicketLogCreateManyInput[]
  }

  /**
   * TicketLog createManyAndReturn
   */
  export type TicketLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TicketLogs.
     */
    data: TicketLogCreateManyInput | TicketLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TicketLog update
   */
  export type TicketLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
    /**
     * The data needed to update a TicketLog.
     */
    data: XOR<TicketLogUpdateInput, TicketLogUncheckedUpdateInput>
    /**
     * Choose, which TicketLog to update.
     */
    where: TicketLogWhereUniqueInput
  }

  /**
   * TicketLog updateMany
   */
  export type TicketLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TicketLogs.
     */
    data: XOR<TicketLogUpdateManyMutationInput, TicketLogUncheckedUpdateManyInput>
    /**
     * Filter which TicketLogs to update
     */
    where?: TicketLogWhereInput
  }

  /**
   * TicketLog upsert
   */
  export type TicketLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
    /**
     * The filter to search for the TicketLog to update in case it exists.
     */
    where: TicketLogWhereUniqueInput
    /**
     * In case the TicketLog found by the `where` argument doesn't exist, create a new TicketLog with this data.
     */
    create: XOR<TicketLogCreateInput, TicketLogUncheckedCreateInput>
    /**
     * In case the TicketLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketLogUpdateInput, TicketLogUncheckedUpdateInput>
  }

  /**
   * TicketLog delete
   */
  export type TicketLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
    /**
     * Filter which TicketLog to delete.
     */
    where: TicketLogWhereUniqueInput
  }

  /**
   * TicketLog deleteMany
   */
  export type TicketLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketLogs to delete
     */
    where?: TicketLogWhereInput
  }

  /**
   * TicketLog without action
   */
  export type TicketLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketLog
     */
    select?: TicketLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketLogInclude<ExtArgs> | null
  }


  /**
   * Model TicketHistory
   */

  export type AggregateTicketHistory = {
    _count: TicketHistoryCountAggregateOutputType | null
    _avg: TicketHistoryAvgAggregateOutputType | null
    _sum: TicketHistorySumAggregateOutputType | null
    _min: TicketHistoryMinAggregateOutputType | null
    _max: TicketHistoryMaxAggregateOutputType | null
  }

  export type TicketHistoryAvgAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    department_id: number | null
    staff_id: number | null
    previous_department_id: number | null
    time_spent: number | null
  }

  export type TicketHistorySumAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    department_id: number | null
    staff_id: number | null
    previous_department_id: number | null
    time_spent: number | null
  }

  export type TicketHistoryMinAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    department_id: number | null
    staff_id: number | null
    action: string | null
    previous_department_id: number | null
    time_spent: number | null
    entry_time: Date | null
    exit_time: Date | null
  }

  export type TicketHistoryMaxAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    department_id: number | null
    staff_id: number | null
    action: string | null
    previous_department_id: number | null
    time_spent: number | null
    entry_time: Date | null
    exit_time: Date | null
  }

  export type TicketHistoryCountAggregateOutputType = {
    id: number
    ticket_id: number
    department_id: number
    staff_id: number
    action: number
    previous_department_id: number
    time_spent: number
    entry_time: number
    exit_time: number
    _all: number
  }


  export type TicketHistoryAvgAggregateInputType = {
    id?: true
    ticket_id?: true
    department_id?: true
    staff_id?: true
    previous_department_id?: true
    time_spent?: true
  }

  export type TicketHistorySumAggregateInputType = {
    id?: true
    ticket_id?: true
    department_id?: true
    staff_id?: true
    previous_department_id?: true
    time_spent?: true
  }

  export type TicketHistoryMinAggregateInputType = {
    id?: true
    ticket_id?: true
    department_id?: true
    staff_id?: true
    action?: true
    previous_department_id?: true
    time_spent?: true
    entry_time?: true
    exit_time?: true
  }

  export type TicketHistoryMaxAggregateInputType = {
    id?: true
    ticket_id?: true
    department_id?: true
    staff_id?: true
    action?: true
    previous_department_id?: true
    time_spent?: true
    entry_time?: true
    exit_time?: true
  }

  export type TicketHistoryCountAggregateInputType = {
    id?: true
    ticket_id?: true
    department_id?: true
    staff_id?: true
    action?: true
    previous_department_id?: true
    time_spent?: true
    entry_time?: true
    exit_time?: true
    _all?: true
  }

  export type TicketHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketHistory to aggregate.
     */
    where?: TicketHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketHistories to fetch.
     */
    orderBy?: TicketHistoryOrderByWithRelationInput | TicketHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TicketHistories
    **/
    _count?: true | TicketHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketHistoryMaxAggregateInputType
  }

  export type GetTicketHistoryAggregateType<T extends TicketHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateTicketHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicketHistory[P]>
      : GetScalarType<T[P], AggregateTicketHistory[P]>
  }




  export type TicketHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketHistoryWhereInput
    orderBy?: TicketHistoryOrderByWithAggregationInput | TicketHistoryOrderByWithAggregationInput[]
    by: TicketHistoryScalarFieldEnum[] | TicketHistoryScalarFieldEnum
    having?: TicketHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketHistoryCountAggregateInputType | true
    _avg?: TicketHistoryAvgAggregateInputType
    _sum?: TicketHistorySumAggregateInputType
    _min?: TicketHistoryMinAggregateInputType
    _max?: TicketHistoryMaxAggregateInputType
  }

  export type TicketHistoryGroupByOutputType = {
    id: number
    ticket_id: number
    department_id: number
    staff_id: number | null
    action: string
    previous_department_id: number | null
    time_spent: number | null
    entry_time: Date
    exit_time: Date | null
    _count: TicketHistoryCountAggregateOutputType | null
    _avg: TicketHistoryAvgAggregateOutputType | null
    _sum: TicketHistorySumAggregateOutputType | null
    _min: TicketHistoryMinAggregateOutputType | null
    _max: TicketHistoryMaxAggregateOutputType | null
  }

  type GetTicketHistoryGroupByPayload<T extends TicketHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], TicketHistoryGroupByOutputType[P]>
        }
      >
    >


  export type TicketHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticket_id?: boolean
    department_id?: boolean
    staff_id?: boolean
    action?: boolean
    previous_department_id?: boolean
    time_spent?: boolean
    entry_time?: boolean
    exit_time?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    staff?: boolean | TicketHistory$staffArgs<ExtArgs>
  }, ExtArgs["result"]["ticketHistory"]>

  export type TicketHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticket_id?: boolean
    department_id?: boolean
    staff_id?: boolean
    action?: boolean
    previous_department_id?: boolean
    time_spent?: boolean
    entry_time?: boolean
    exit_time?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    staff?: boolean | TicketHistory$staffArgs<ExtArgs>
  }, ExtArgs["result"]["ticketHistory"]>

  export type TicketHistorySelectScalar = {
    id?: boolean
    ticket_id?: boolean
    department_id?: boolean
    staff_id?: boolean
    action?: boolean
    previous_department_id?: boolean
    time_spent?: boolean
    entry_time?: boolean
    exit_time?: boolean
  }

  export type TicketHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    staff?: boolean | TicketHistory$staffArgs<ExtArgs>
  }
  export type TicketHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    staff?: boolean | TicketHistory$staffArgs<ExtArgs>
  }

  export type $TicketHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TicketHistory"
    objects: {
      ticket: Prisma.$TicketPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
      staff: Prisma.$StaffUserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ticket_id: number
      department_id: number
      staff_id: number | null
      action: string
      previous_department_id: number | null
      time_spent: number | null
      entry_time: Date
      exit_time: Date | null
    }, ExtArgs["result"]["ticketHistory"]>
    composites: {}
  }

  type TicketHistoryGetPayload<S extends boolean | null | undefined | TicketHistoryDefaultArgs> = $Result.GetResult<Prisma.$TicketHistoryPayload, S>

  type TicketHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketHistoryCountAggregateInputType | true
    }

  export interface TicketHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TicketHistory'], meta: { name: 'TicketHistory' } }
    /**
     * Find zero or one TicketHistory that matches the filter.
     * @param {TicketHistoryFindUniqueArgs} args - Arguments to find a TicketHistory
     * @example
     * // Get one TicketHistory
     * const ticketHistory = await prisma.ticketHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketHistoryFindUniqueArgs>(args: SelectSubset<T, TicketHistoryFindUniqueArgs<ExtArgs>>): Prisma__TicketHistoryClient<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TicketHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketHistoryFindUniqueOrThrowArgs} args - Arguments to find a TicketHistory
     * @example
     * // Get one TicketHistory
     * const ticketHistory = await prisma.ticketHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketHistoryClient<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TicketHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketHistoryFindFirstArgs} args - Arguments to find a TicketHistory
     * @example
     * // Get one TicketHistory
     * const ticketHistory = await prisma.ticketHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketHistoryFindFirstArgs>(args?: SelectSubset<T, TicketHistoryFindFirstArgs<ExtArgs>>): Prisma__TicketHistoryClient<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TicketHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketHistoryFindFirstOrThrowArgs} args - Arguments to find a TicketHistory
     * @example
     * // Get one TicketHistory
     * const ticketHistory = await prisma.ticketHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketHistoryClient<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TicketHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TicketHistories
     * const ticketHistories = await prisma.ticketHistory.findMany()
     * 
     * // Get first 10 TicketHistories
     * const ticketHistories = await prisma.ticketHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketHistoryWithIdOnly = await prisma.ticketHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TicketHistoryFindManyArgs>(args?: SelectSubset<T, TicketHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TicketHistory.
     * @param {TicketHistoryCreateArgs} args - Arguments to create a TicketHistory.
     * @example
     * // Create one TicketHistory
     * const TicketHistory = await prisma.ticketHistory.create({
     *   data: {
     *     // ... data to create a TicketHistory
     *   }
     * })
     * 
     */
    create<T extends TicketHistoryCreateArgs>(args: SelectSubset<T, TicketHistoryCreateArgs<ExtArgs>>): Prisma__TicketHistoryClient<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TicketHistories.
     * @param {TicketHistoryCreateManyArgs} args - Arguments to create many TicketHistories.
     * @example
     * // Create many TicketHistories
     * const ticketHistory = await prisma.ticketHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketHistoryCreateManyArgs>(args?: SelectSubset<T, TicketHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TicketHistories and returns the data saved in the database.
     * @param {TicketHistoryCreateManyAndReturnArgs} args - Arguments to create many TicketHistories.
     * @example
     * // Create many TicketHistories
     * const ticketHistory = await prisma.ticketHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TicketHistories and only return the `id`
     * const ticketHistoryWithIdOnly = await prisma.ticketHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TicketHistory.
     * @param {TicketHistoryDeleteArgs} args - Arguments to delete one TicketHistory.
     * @example
     * // Delete one TicketHistory
     * const TicketHistory = await prisma.ticketHistory.delete({
     *   where: {
     *     // ... filter to delete one TicketHistory
     *   }
     * })
     * 
     */
    delete<T extends TicketHistoryDeleteArgs>(args: SelectSubset<T, TicketHistoryDeleteArgs<ExtArgs>>): Prisma__TicketHistoryClient<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TicketHistory.
     * @param {TicketHistoryUpdateArgs} args - Arguments to update one TicketHistory.
     * @example
     * // Update one TicketHistory
     * const ticketHistory = await prisma.ticketHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketHistoryUpdateArgs>(args: SelectSubset<T, TicketHistoryUpdateArgs<ExtArgs>>): Prisma__TicketHistoryClient<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TicketHistories.
     * @param {TicketHistoryDeleteManyArgs} args - Arguments to filter TicketHistories to delete.
     * @example
     * // Delete a few TicketHistories
     * const { count } = await prisma.ticketHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketHistoryDeleteManyArgs>(args?: SelectSubset<T, TicketHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TicketHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TicketHistories
     * const ticketHistory = await prisma.ticketHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketHistoryUpdateManyArgs>(args: SelectSubset<T, TicketHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TicketHistory.
     * @param {TicketHistoryUpsertArgs} args - Arguments to update or create a TicketHistory.
     * @example
     * // Update or create a TicketHistory
     * const ticketHistory = await prisma.ticketHistory.upsert({
     *   create: {
     *     // ... data to create a TicketHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TicketHistory we want to update
     *   }
     * })
     */
    upsert<T extends TicketHistoryUpsertArgs>(args: SelectSubset<T, TicketHistoryUpsertArgs<ExtArgs>>): Prisma__TicketHistoryClient<$Result.GetResult<Prisma.$TicketHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TicketHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketHistoryCountArgs} args - Arguments to filter TicketHistories to count.
     * @example
     * // Count the number of TicketHistories
     * const count = await prisma.ticketHistory.count({
     *   where: {
     *     // ... the filter for the TicketHistories we want to count
     *   }
     * })
    **/
    count<T extends TicketHistoryCountArgs>(
      args?: Subset<T, TicketHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TicketHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketHistoryAggregateArgs>(args: Subset<T, TicketHistoryAggregateArgs>): Prisma.PrismaPromise<GetTicketHistoryAggregateType<T>>

    /**
     * Group by TicketHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketHistoryGroupByArgs['orderBy'] }
        : { orderBy?: TicketHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TicketHistory model
   */
  readonly fields: TicketHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TicketHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    staff<T extends TicketHistory$staffArgs<ExtArgs> = {}>(args?: Subset<T, TicketHistory$staffArgs<ExtArgs>>): Prisma__StaffUserClient<$Result.GetResult<Prisma.$StaffUserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TicketHistory model
   */ 
  interface TicketHistoryFieldRefs {
    readonly id: FieldRef<"TicketHistory", 'Int'>
    readonly ticket_id: FieldRef<"TicketHistory", 'Int'>
    readonly department_id: FieldRef<"TicketHistory", 'Int'>
    readonly staff_id: FieldRef<"TicketHistory", 'Int'>
    readonly action: FieldRef<"TicketHistory", 'String'>
    readonly previous_department_id: FieldRef<"TicketHistory", 'Int'>
    readonly time_spent: FieldRef<"TicketHistory", 'Int'>
    readonly entry_time: FieldRef<"TicketHistory", 'DateTime'>
    readonly exit_time: FieldRef<"TicketHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TicketHistory findUnique
   */
  export type TicketHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TicketHistory to fetch.
     */
    where: TicketHistoryWhereUniqueInput
  }

  /**
   * TicketHistory findUniqueOrThrow
   */
  export type TicketHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TicketHistory to fetch.
     */
    where: TicketHistoryWhereUniqueInput
  }

  /**
   * TicketHistory findFirst
   */
  export type TicketHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TicketHistory to fetch.
     */
    where?: TicketHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketHistories to fetch.
     */
    orderBy?: TicketHistoryOrderByWithRelationInput | TicketHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketHistories.
     */
    cursor?: TicketHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketHistories.
     */
    distinct?: TicketHistoryScalarFieldEnum | TicketHistoryScalarFieldEnum[]
  }

  /**
   * TicketHistory findFirstOrThrow
   */
  export type TicketHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TicketHistory to fetch.
     */
    where?: TicketHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketHistories to fetch.
     */
    orderBy?: TicketHistoryOrderByWithRelationInput | TicketHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketHistories.
     */
    cursor?: TicketHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketHistories.
     */
    distinct?: TicketHistoryScalarFieldEnum | TicketHistoryScalarFieldEnum[]
  }

  /**
   * TicketHistory findMany
   */
  export type TicketHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TicketHistories to fetch.
     */
    where?: TicketHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketHistories to fetch.
     */
    orderBy?: TicketHistoryOrderByWithRelationInput | TicketHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TicketHistories.
     */
    cursor?: TicketHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketHistories.
     */
    skip?: number
    distinct?: TicketHistoryScalarFieldEnum | TicketHistoryScalarFieldEnum[]
  }

  /**
   * TicketHistory create
   */
  export type TicketHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a TicketHistory.
     */
    data: XOR<TicketHistoryCreateInput, TicketHistoryUncheckedCreateInput>
  }

  /**
   * TicketHistory createMany
   */
  export type TicketHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TicketHistories.
     */
    data: TicketHistoryCreateManyInput | TicketHistoryCreateManyInput[]
  }

  /**
   * TicketHistory createManyAndReturn
   */
  export type TicketHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TicketHistories.
     */
    data: TicketHistoryCreateManyInput | TicketHistoryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TicketHistory update
   */
  export type TicketHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a TicketHistory.
     */
    data: XOR<TicketHistoryUpdateInput, TicketHistoryUncheckedUpdateInput>
    /**
     * Choose, which TicketHistory to update.
     */
    where: TicketHistoryWhereUniqueInput
  }

  /**
   * TicketHistory updateMany
   */
  export type TicketHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TicketHistories.
     */
    data: XOR<TicketHistoryUpdateManyMutationInput, TicketHistoryUncheckedUpdateManyInput>
    /**
     * Filter which TicketHistories to update
     */
    where?: TicketHistoryWhereInput
  }

  /**
   * TicketHistory upsert
   */
  export type TicketHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the TicketHistory to update in case it exists.
     */
    where: TicketHistoryWhereUniqueInput
    /**
     * In case the TicketHistory found by the `where` argument doesn't exist, create a new TicketHistory with this data.
     */
    create: XOR<TicketHistoryCreateInput, TicketHistoryUncheckedCreateInput>
    /**
     * In case the TicketHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketHistoryUpdateInput, TicketHistoryUncheckedUpdateInput>
  }

  /**
   * TicketHistory delete
   */
  export type TicketHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
    /**
     * Filter which TicketHistory to delete.
     */
    where: TicketHistoryWhereUniqueInput
  }

  /**
   * TicketHistory deleteMany
   */
  export type TicketHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketHistories to delete
     */
    where?: TicketHistoryWhereInput
  }

  /**
   * TicketHistory.staff
   */
  export type TicketHistory$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffUser
     */
    select?: StaffUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffUserInclude<ExtArgs> | null
    where?: StaffUserWhereInput
  }

  /**
   * TicketHistory without action
   */
  export type TicketHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketHistory
     */
    select?: TicketHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketHistoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PatientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email',
    created_at: 'created_at'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    active: 'active',
    last_ticket_no: 'last_ticket_no',
    created_at: 'created_at'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const StaffUserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    department_id: 'department_id',
    active: 'active',
    created_at: 'created_at',
    reset_token: 'reset_token',
    reset_token_expires: 'reset_token_expires'
  };

  export type StaffUserScalarFieldEnum = (typeof StaffUserScalarFieldEnum)[keyof typeof StaffUserScalarFieldEnum]


  export const TicketScalarFieldEnum: {
    id: 'id',
    ticket_no: 'ticket_no',
    original_ticket_no: 'original_ticket_no',
    patient_id: 'patient_id',
    department_id: 'department_id',
    status: 'status',
    forwarded_from: 'forwarded_from',
    priority: 'priority',
    created_at: 'created_at',
    served_at: 'served_at',
    served_by: 'served_by'
  };

  export type TicketScalarFieldEnum = (typeof TicketScalarFieldEnum)[keyof typeof TicketScalarFieldEnum]


  export const TicketLogScalarFieldEnum: {
    id: 'id',
    ticket_id: 'ticket_id',
    action: 'action',
    performed_by: 'performed_by',
    notes: 'notes',
    created_at: 'created_at'
  };

  export type TicketLogScalarFieldEnum = (typeof TicketLogScalarFieldEnum)[keyof typeof TicketLogScalarFieldEnum]


  export const TicketHistoryScalarFieldEnum: {
    id: 'id',
    ticket_id: 'ticket_id',
    department_id: 'department_id',
    staff_id: 'staff_id',
    action: 'action',
    previous_department_id: 'previous_department_id',
    time_spent: 'time_spent',
    entry_time: 'entry_time',
    exit_time: 'exit_time'
  };

  export type TicketHistoryScalarFieldEnum = (typeof TicketHistoryScalarFieldEnum)[keyof typeof TicketHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: IntFilter<"Patient"> | number
    name?: StringFilter<"Patient"> | string
    phone?: StringNullableFilter<"Patient"> | string | null
    email?: StringNullableFilter<"Patient"> | string | null
    created_at?: DateTimeFilter<"Patient"> | Date | string
    tickets?: TicketListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrder
    tickets?: TicketOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    name?: StringFilter<"Patient"> | string
    phone?: StringNullableFilter<"Patient"> | string | null
    email?: StringNullableFilter<"Patient"> | string | null
    created_at?: DateTimeFilter<"Patient"> | Date | string
    tickets?: TicketListRelationFilter
  }, "id">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Patient"> | number
    name?: StringWithAggregatesFilter<"Patient"> | string
    phone?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    email?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: IntFilter<"Department"> | number
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    active?: BoolFilter<"Department"> | boolean
    last_ticket_no?: IntFilter<"Department"> | number
    created_at?: DateTimeFilter<"Department"> | Date | string
    tickets?: TicketListRelationFilter
    staff_users?: StaffUserListRelationFilter
    ticket_history?: TicketHistoryListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    active?: SortOrder
    last_ticket_no?: SortOrder
    created_at?: SortOrder
    tickets?: TicketOrderByRelationAggregateInput
    staff_users?: StaffUserOrderByRelationAggregateInput
    ticket_history?: TicketHistoryOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    active?: BoolFilter<"Department"> | boolean
    last_ticket_no?: IntFilter<"Department"> | number
    created_at?: DateTimeFilter<"Department"> | Date | string
    tickets?: TicketListRelationFilter
    staff_users?: StaffUserListRelationFilter
    ticket_history?: TicketHistoryListRelationFilter
  }, "id" | "code">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    active?: SortOrder
    last_ticket_no?: SortOrder
    created_at?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Department"> | number
    name?: StringWithAggregatesFilter<"Department"> | string
    code?: StringWithAggregatesFilter<"Department"> | string
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
    active?: BoolWithAggregatesFilter<"Department"> | boolean
    last_ticket_no?: IntWithAggregatesFilter<"Department"> | number
    created_at?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type StaffUserWhereInput = {
    AND?: StaffUserWhereInput | StaffUserWhereInput[]
    OR?: StaffUserWhereInput[]
    NOT?: StaffUserWhereInput | StaffUserWhereInput[]
    id?: IntFilter<"StaffUser"> | number
    name?: StringFilter<"StaffUser"> | string
    email?: StringFilter<"StaffUser"> | string
    password?: StringFilter<"StaffUser"> | string
    role?: StringFilter<"StaffUser"> | string
    department_id?: IntNullableFilter<"StaffUser"> | number | null
    active?: BoolFilter<"StaffUser"> | boolean
    created_at?: DateTimeFilter<"StaffUser"> | Date | string
    reset_token?: StringNullableFilter<"StaffUser"> | string | null
    reset_token_expires?: DateTimeNullableFilter<"StaffUser"> | Date | string | null
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    served_tickets?: TicketListRelationFilter
    ticket_logs?: TicketLogListRelationFilter
    ticket_history?: TicketHistoryListRelationFilter
  }

  export type StaffUserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    department_id?: SortOrderInput | SortOrder
    active?: SortOrder
    created_at?: SortOrder
    reset_token?: SortOrderInput | SortOrder
    reset_token_expires?: SortOrderInput | SortOrder
    department?: DepartmentOrderByWithRelationInput
    served_tickets?: TicketOrderByRelationAggregateInput
    ticket_logs?: TicketLogOrderByRelationAggregateInput
    ticket_history?: TicketHistoryOrderByRelationAggregateInput
  }

  export type StaffUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: StaffUserWhereInput | StaffUserWhereInput[]
    OR?: StaffUserWhereInput[]
    NOT?: StaffUserWhereInput | StaffUserWhereInput[]
    name?: StringFilter<"StaffUser"> | string
    password?: StringFilter<"StaffUser"> | string
    role?: StringFilter<"StaffUser"> | string
    department_id?: IntNullableFilter<"StaffUser"> | number | null
    active?: BoolFilter<"StaffUser"> | boolean
    created_at?: DateTimeFilter<"StaffUser"> | Date | string
    reset_token?: StringNullableFilter<"StaffUser"> | string | null
    reset_token_expires?: DateTimeNullableFilter<"StaffUser"> | Date | string | null
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    served_tickets?: TicketListRelationFilter
    ticket_logs?: TicketLogListRelationFilter
    ticket_history?: TicketHistoryListRelationFilter
  }, "id" | "email">

  export type StaffUserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    department_id?: SortOrderInput | SortOrder
    active?: SortOrder
    created_at?: SortOrder
    reset_token?: SortOrderInput | SortOrder
    reset_token_expires?: SortOrderInput | SortOrder
    _count?: StaffUserCountOrderByAggregateInput
    _avg?: StaffUserAvgOrderByAggregateInput
    _max?: StaffUserMaxOrderByAggregateInput
    _min?: StaffUserMinOrderByAggregateInput
    _sum?: StaffUserSumOrderByAggregateInput
  }

  export type StaffUserScalarWhereWithAggregatesInput = {
    AND?: StaffUserScalarWhereWithAggregatesInput | StaffUserScalarWhereWithAggregatesInput[]
    OR?: StaffUserScalarWhereWithAggregatesInput[]
    NOT?: StaffUserScalarWhereWithAggregatesInput | StaffUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StaffUser"> | number
    name?: StringWithAggregatesFilter<"StaffUser"> | string
    email?: StringWithAggregatesFilter<"StaffUser"> | string
    password?: StringWithAggregatesFilter<"StaffUser"> | string
    role?: StringWithAggregatesFilter<"StaffUser"> | string
    department_id?: IntNullableWithAggregatesFilter<"StaffUser"> | number | null
    active?: BoolWithAggregatesFilter<"StaffUser"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"StaffUser"> | Date | string
    reset_token?: StringNullableWithAggregatesFilter<"StaffUser"> | string | null
    reset_token_expires?: DateTimeNullableWithAggregatesFilter<"StaffUser"> | Date | string | null
  }

  export type TicketWhereInput = {
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    id?: IntFilter<"Ticket"> | number
    ticket_no?: StringFilter<"Ticket"> | string
    original_ticket_no?: StringNullableFilter<"Ticket"> | string | null
    patient_id?: IntFilter<"Ticket"> | number
    department_id?: IntFilter<"Ticket"> | number
    status?: StringFilter<"Ticket"> | string
    forwarded_from?: IntNullableFilter<"Ticket"> | number | null
    priority?: IntFilter<"Ticket"> | number
    created_at?: DateTimeFilter<"Ticket"> | Date | string
    served_at?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    served_by?: IntNullableFilter<"Ticket"> | number | null
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    served_by_user?: XOR<StaffUserNullableRelationFilter, StaffUserWhereInput> | null
    ticket_logs?: TicketLogListRelationFilter
    ticket_history?: TicketHistoryListRelationFilter
  }

  export type TicketOrderByWithRelationInput = {
    id?: SortOrder
    ticket_no?: SortOrder
    original_ticket_no?: SortOrderInput | SortOrder
    patient_id?: SortOrder
    department_id?: SortOrder
    status?: SortOrder
    forwarded_from?: SortOrderInput | SortOrder
    priority?: SortOrder
    created_at?: SortOrder
    served_at?: SortOrderInput | SortOrder
    served_by?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    served_by_user?: StaffUserOrderByWithRelationInput
    ticket_logs?: TicketLogOrderByRelationAggregateInput
    ticket_history?: TicketHistoryOrderByRelationAggregateInput
  }

  export type TicketWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    ticket_no?: string
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    original_ticket_no?: StringNullableFilter<"Ticket"> | string | null
    patient_id?: IntFilter<"Ticket"> | number
    department_id?: IntFilter<"Ticket"> | number
    status?: StringFilter<"Ticket"> | string
    forwarded_from?: IntNullableFilter<"Ticket"> | number | null
    priority?: IntFilter<"Ticket"> | number
    created_at?: DateTimeFilter<"Ticket"> | Date | string
    served_at?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    served_by?: IntNullableFilter<"Ticket"> | number | null
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    served_by_user?: XOR<StaffUserNullableRelationFilter, StaffUserWhereInput> | null
    ticket_logs?: TicketLogListRelationFilter
    ticket_history?: TicketHistoryListRelationFilter
  }, "id" | "ticket_no">

  export type TicketOrderByWithAggregationInput = {
    id?: SortOrder
    ticket_no?: SortOrder
    original_ticket_no?: SortOrderInput | SortOrder
    patient_id?: SortOrder
    department_id?: SortOrder
    status?: SortOrder
    forwarded_from?: SortOrderInput | SortOrder
    priority?: SortOrder
    created_at?: SortOrder
    served_at?: SortOrderInput | SortOrder
    served_by?: SortOrderInput | SortOrder
    _count?: TicketCountOrderByAggregateInput
    _avg?: TicketAvgOrderByAggregateInput
    _max?: TicketMaxOrderByAggregateInput
    _min?: TicketMinOrderByAggregateInput
    _sum?: TicketSumOrderByAggregateInput
  }

  export type TicketScalarWhereWithAggregatesInput = {
    AND?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    OR?: TicketScalarWhereWithAggregatesInput[]
    NOT?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ticket"> | number
    ticket_no?: StringWithAggregatesFilter<"Ticket"> | string
    original_ticket_no?: StringNullableWithAggregatesFilter<"Ticket"> | string | null
    patient_id?: IntWithAggregatesFilter<"Ticket"> | number
    department_id?: IntWithAggregatesFilter<"Ticket"> | number
    status?: StringWithAggregatesFilter<"Ticket"> | string
    forwarded_from?: IntNullableWithAggregatesFilter<"Ticket"> | number | null
    priority?: IntWithAggregatesFilter<"Ticket"> | number
    created_at?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
    served_at?: DateTimeNullableWithAggregatesFilter<"Ticket"> | Date | string | null
    served_by?: IntNullableWithAggregatesFilter<"Ticket"> | number | null
  }

  export type TicketLogWhereInput = {
    AND?: TicketLogWhereInput | TicketLogWhereInput[]
    OR?: TicketLogWhereInput[]
    NOT?: TicketLogWhereInput | TicketLogWhereInput[]
    id?: IntFilter<"TicketLog"> | number
    ticket_id?: IntFilter<"TicketLog"> | number
    action?: StringFilter<"TicketLog"> | string
    performed_by?: IntFilter<"TicketLog"> | number
    notes?: StringNullableFilter<"TicketLog"> | string | null
    created_at?: DateTimeFilter<"TicketLog"> | Date | string
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
    staff_user?: XOR<StaffUserRelationFilter, StaffUserWhereInput>
  }

  export type TicketLogOrderByWithRelationInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    action?: SortOrder
    performed_by?: SortOrder
    notes?: SortOrderInput | SortOrder
    created_at?: SortOrder
    ticket?: TicketOrderByWithRelationInput
    staff_user?: StaffUserOrderByWithRelationInput
  }

  export type TicketLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TicketLogWhereInput | TicketLogWhereInput[]
    OR?: TicketLogWhereInput[]
    NOT?: TicketLogWhereInput | TicketLogWhereInput[]
    ticket_id?: IntFilter<"TicketLog"> | number
    action?: StringFilter<"TicketLog"> | string
    performed_by?: IntFilter<"TicketLog"> | number
    notes?: StringNullableFilter<"TicketLog"> | string | null
    created_at?: DateTimeFilter<"TicketLog"> | Date | string
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
    staff_user?: XOR<StaffUserRelationFilter, StaffUserWhereInput>
  }, "id">

  export type TicketLogOrderByWithAggregationInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    action?: SortOrder
    performed_by?: SortOrder
    notes?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: TicketLogCountOrderByAggregateInput
    _avg?: TicketLogAvgOrderByAggregateInput
    _max?: TicketLogMaxOrderByAggregateInput
    _min?: TicketLogMinOrderByAggregateInput
    _sum?: TicketLogSumOrderByAggregateInput
  }

  export type TicketLogScalarWhereWithAggregatesInput = {
    AND?: TicketLogScalarWhereWithAggregatesInput | TicketLogScalarWhereWithAggregatesInput[]
    OR?: TicketLogScalarWhereWithAggregatesInput[]
    NOT?: TicketLogScalarWhereWithAggregatesInput | TicketLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TicketLog"> | number
    ticket_id?: IntWithAggregatesFilter<"TicketLog"> | number
    action?: StringWithAggregatesFilter<"TicketLog"> | string
    performed_by?: IntWithAggregatesFilter<"TicketLog"> | number
    notes?: StringNullableWithAggregatesFilter<"TicketLog"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"TicketLog"> | Date | string
  }

  export type TicketHistoryWhereInput = {
    AND?: TicketHistoryWhereInput | TicketHistoryWhereInput[]
    OR?: TicketHistoryWhereInput[]
    NOT?: TicketHistoryWhereInput | TicketHistoryWhereInput[]
    id?: IntFilter<"TicketHistory"> | number
    ticket_id?: IntFilter<"TicketHistory"> | number
    department_id?: IntFilter<"TicketHistory"> | number
    staff_id?: IntNullableFilter<"TicketHistory"> | number | null
    action?: StringFilter<"TicketHistory"> | string
    previous_department_id?: IntNullableFilter<"TicketHistory"> | number | null
    time_spent?: IntNullableFilter<"TicketHistory"> | number | null
    entry_time?: DateTimeFilter<"TicketHistory"> | Date | string
    exit_time?: DateTimeNullableFilter<"TicketHistory"> | Date | string | null
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    staff?: XOR<StaffUserNullableRelationFilter, StaffUserWhereInput> | null
  }

  export type TicketHistoryOrderByWithRelationInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    department_id?: SortOrder
    staff_id?: SortOrderInput | SortOrder
    action?: SortOrder
    previous_department_id?: SortOrderInput | SortOrder
    time_spent?: SortOrderInput | SortOrder
    entry_time?: SortOrder
    exit_time?: SortOrderInput | SortOrder
    ticket?: TicketOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    staff?: StaffUserOrderByWithRelationInput
  }

  export type TicketHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TicketHistoryWhereInput | TicketHistoryWhereInput[]
    OR?: TicketHistoryWhereInput[]
    NOT?: TicketHistoryWhereInput | TicketHistoryWhereInput[]
    ticket_id?: IntFilter<"TicketHistory"> | number
    department_id?: IntFilter<"TicketHistory"> | number
    staff_id?: IntNullableFilter<"TicketHistory"> | number | null
    action?: StringFilter<"TicketHistory"> | string
    previous_department_id?: IntNullableFilter<"TicketHistory"> | number | null
    time_spent?: IntNullableFilter<"TicketHistory"> | number | null
    entry_time?: DateTimeFilter<"TicketHistory"> | Date | string
    exit_time?: DateTimeNullableFilter<"TicketHistory"> | Date | string | null
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    staff?: XOR<StaffUserNullableRelationFilter, StaffUserWhereInput> | null
  }, "id">

  export type TicketHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    department_id?: SortOrder
    staff_id?: SortOrderInput | SortOrder
    action?: SortOrder
    previous_department_id?: SortOrderInput | SortOrder
    time_spent?: SortOrderInput | SortOrder
    entry_time?: SortOrder
    exit_time?: SortOrderInput | SortOrder
    _count?: TicketHistoryCountOrderByAggregateInput
    _avg?: TicketHistoryAvgOrderByAggregateInput
    _max?: TicketHistoryMaxOrderByAggregateInput
    _min?: TicketHistoryMinOrderByAggregateInput
    _sum?: TicketHistorySumOrderByAggregateInput
  }

  export type TicketHistoryScalarWhereWithAggregatesInput = {
    AND?: TicketHistoryScalarWhereWithAggregatesInput | TicketHistoryScalarWhereWithAggregatesInput[]
    OR?: TicketHistoryScalarWhereWithAggregatesInput[]
    NOT?: TicketHistoryScalarWhereWithAggregatesInput | TicketHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TicketHistory"> | number
    ticket_id?: IntWithAggregatesFilter<"TicketHistory"> | number
    department_id?: IntWithAggregatesFilter<"TicketHistory"> | number
    staff_id?: IntNullableWithAggregatesFilter<"TicketHistory"> | number | null
    action?: StringWithAggregatesFilter<"TicketHistory"> | string
    previous_department_id?: IntNullableWithAggregatesFilter<"TicketHistory"> | number | null
    time_spent?: IntNullableWithAggregatesFilter<"TicketHistory"> | number | null
    entry_time?: DateTimeWithAggregatesFilter<"TicketHistory"> | Date | string
    exit_time?: DateTimeNullableWithAggregatesFilter<"TicketHistory"> | Date | string | null
  }

  export type PatientCreateInput = {
    name: string
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    tickets?: TicketCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: number
    name: string
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: number
    name: string
    phone?: string | null
    email?: string | null
    created_at?: Date | string
  }

  export type PatientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCreateInput = {
    name: string
    code: string
    description?: string | null
    active?: boolean
    last_ticket_no?: number
    created_at?: Date | string
    tickets?: TicketCreateNestedManyWithoutDepartmentInput
    staff_users?: StaffUserCreateNestedManyWithoutDepartmentInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    description?: string | null
    active?: boolean
    last_ticket_no?: number
    created_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutDepartmentInput
    staff_users?: StaffUserUncheckedCreateNestedManyWithoutDepartmentInput
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    last_ticket_no?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUpdateManyWithoutDepartmentNestedInput
    staff_users?: StaffUserUpdateManyWithoutDepartmentNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    last_ticket_no?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutDepartmentNestedInput
    staff_users?: StaffUserUncheckedUpdateManyWithoutDepartmentNestedInput
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: number
    name: string
    code: string
    description?: string | null
    active?: boolean
    last_ticket_no?: number
    created_at?: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    last_ticket_no?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    last_ticket_no?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUserCreateInput = {
    name: string
    email: string
    password: string
    role: string
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutStaff_usersInput
    served_tickets?: TicketCreateNestedManyWithoutServed_by_userInput
    ticket_logs?: TicketLogCreateNestedManyWithoutStaff_userInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutStaffInput
  }

  export type StaffUserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    role: string
    department_id?: number | null
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    served_tickets?: TicketUncheckedCreateNestedManyWithoutServed_by_userInput
    ticket_logs?: TicketLogUncheckedCreateNestedManyWithoutStaff_userInput
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffUserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutStaff_usersNestedInput
    served_tickets?: TicketUpdateManyWithoutServed_by_userNestedInput
    ticket_logs?: TicketLogUpdateManyWithoutStaff_userNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutStaffNestedInput
  }

  export type StaffUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_tickets?: TicketUncheckedUpdateManyWithoutServed_by_userNestedInput
    ticket_logs?: TicketLogUncheckedUpdateManyWithoutStaff_userNestedInput
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type StaffUserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    role: string
    department_id?: number | null
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
  }

  export type StaffUserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StaffUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketCreateInput = {
    ticket_no: string
    original_ticket_no?: string | null
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    patient: PatientCreateNestedOneWithoutTicketsInput
    department: DepartmentCreateNestedOneWithoutTicketsInput
    served_by_user?: StaffUserCreateNestedOneWithoutServed_ticketsInput
    ticket_logs?: TicketLogCreateNestedManyWithoutTicketInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateInput = {
    id?: number
    ticket_no: string
    original_ticket_no?: string | null
    patient_id: number
    department_id: number
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    served_by?: number | null
    ticket_logs?: TicketLogUncheckedCreateNestedManyWithoutTicketInput
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketUpdateInput = {
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutTicketsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTicketsNestedInput
    served_by_user?: StaffUserUpdateOneWithoutServed_ticketsNestedInput
    ticket_logs?: TicketLogUpdateManyWithoutTicketNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_by?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_logs?: TicketLogUncheckedUpdateManyWithoutTicketNestedInput
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketCreateManyInput = {
    id?: number
    ticket_no: string
    original_ticket_no?: string | null
    patient_id: number
    department_id: number
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    served_by?: number | null
  }

  export type TicketUpdateManyMutationInput = {
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_by?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TicketLogCreateInput = {
    action: string
    notes?: string | null
    created_at?: Date | string
    ticket: TicketCreateNestedOneWithoutTicket_logsInput
    staff_user: StaffUserCreateNestedOneWithoutTicket_logsInput
  }

  export type TicketLogUncheckedCreateInput = {
    id?: number
    ticket_id: number
    action: string
    performed_by: number
    notes?: string | null
    created_at?: Date | string
  }

  export type TicketLogUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: TicketUpdateOneRequiredWithoutTicket_logsNestedInput
    staff_user?: StaffUserUpdateOneRequiredWithoutTicket_logsNestedInput
  }

  export type TicketLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    performed_by?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketLogCreateManyInput = {
    id?: number
    ticket_id: number
    action: string
    performed_by: number
    notes?: string | null
    created_at?: Date | string
  }

  export type TicketLogUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    performed_by?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketHistoryCreateInput = {
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
    ticket: TicketCreateNestedOneWithoutTicket_historyInput
    department: DepartmentCreateNestedOneWithoutTicket_historyInput
    staff?: StaffUserCreateNestedOneWithoutTicket_historyInput
  }

  export type TicketHistoryUncheckedCreateInput = {
    id?: number
    ticket_id: number
    department_id: number
    staff_id?: number | null
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
  }

  export type TicketHistoryUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket?: TicketUpdateOneRequiredWithoutTicket_historyNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTicket_historyNestedInput
    staff?: StaffUserUpdateOneWithoutTicket_historyNestedInput
  }

  export type TicketHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketHistoryCreateManyInput = {
    id?: number
    ticket_id: number
    department_id: number
    staff_id?: number | null
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
  }

  export type TicketHistoryUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TicketListRelationFilter = {
    every?: TicketWhereInput
    some?: TicketWhereInput
    none?: TicketWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StaffUserListRelationFilter = {
    every?: StaffUserWhereInput
    some?: StaffUserWhereInput
    none?: StaffUserWhereInput
  }

  export type TicketHistoryListRelationFilter = {
    every?: TicketHistoryWhereInput
    some?: TicketHistoryWhereInput
    none?: TicketHistoryWhereInput
  }

  export type StaffUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    active?: SortOrder
    last_ticket_no?: SortOrder
    created_at?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    id?: SortOrder
    last_ticket_no?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    active?: SortOrder
    last_ticket_no?: SortOrder
    created_at?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    active?: SortOrder
    last_ticket_no?: SortOrder
    created_at?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    id?: SortOrder
    last_ticket_no?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DepartmentNullableRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type TicketLogListRelationFilter = {
    every?: TicketLogWhereInput
    some?: TicketLogWhereInput
    none?: TicketLogWhereInput
  }

  export type TicketLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffUserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    department_id?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    reset_token?: SortOrder
    reset_token_expires?: SortOrder
  }

  export type StaffUserAvgOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
  }

  export type StaffUserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    department_id?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    reset_token?: SortOrder
    reset_token_expires?: SortOrder
  }

  export type StaffUserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    department_id?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    reset_token?: SortOrder
    reset_token_expires?: SortOrder
  }

  export type StaffUserSumOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PatientRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type DepartmentRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type StaffUserNullableRelationFilter = {
    is?: StaffUserWhereInput | null
    isNot?: StaffUserWhereInput | null
  }

  export type TicketCountOrderByAggregateInput = {
    id?: SortOrder
    ticket_no?: SortOrder
    original_ticket_no?: SortOrder
    patient_id?: SortOrder
    department_id?: SortOrder
    status?: SortOrder
    forwarded_from?: SortOrder
    priority?: SortOrder
    created_at?: SortOrder
    served_at?: SortOrder
    served_by?: SortOrder
  }

  export type TicketAvgOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    department_id?: SortOrder
    forwarded_from?: SortOrder
    priority?: SortOrder
    served_by?: SortOrder
  }

  export type TicketMaxOrderByAggregateInput = {
    id?: SortOrder
    ticket_no?: SortOrder
    original_ticket_no?: SortOrder
    patient_id?: SortOrder
    department_id?: SortOrder
    status?: SortOrder
    forwarded_from?: SortOrder
    priority?: SortOrder
    created_at?: SortOrder
    served_at?: SortOrder
    served_by?: SortOrder
  }

  export type TicketMinOrderByAggregateInput = {
    id?: SortOrder
    ticket_no?: SortOrder
    original_ticket_no?: SortOrder
    patient_id?: SortOrder
    department_id?: SortOrder
    status?: SortOrder
    forwarded_from?: SortOrder
    priority?: SortOrder
    created_at?: SortOrder
    served_at?: SortOrder
    served_by?: SortOrder
  }

  export type TicketSumOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    department_id?: SortOrder
    forwarded_from?: SortOrder
    priority?: SortOrder
    served_by?: SortOrder
  }

  export type TicketRelationFilter = {
    is?: TicketWhereInput
    isNot?: TicketWhereInput
  }

  export type StaffUserRelationFilter = {
    is?: StaffUserWhereInput
    isNot?: StaffUserWhereInput
  }

  export type TicketLogCountOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    action?: SortOrder
    performed_by?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
  }

  export type TicketLogAvgOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    performed_by?: SortOrder
  }

  export type TicketLogMaxOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    action?: SortOrder
    performed_by?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
  }

  export type TicketLogMinOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    action?: SortOrder
    performed_by?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
  }

  export type TicketLogSumOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    performed_by?: SortOrder
  }

  export type TicketHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    department_id?: SortOrder
    staff_id?: SortOrder
    action?: SortOrder
    previous_department_id?: SortOrder
    time_spent?: SortOrder
    entry_time?: SortOrder
    exit_time?: SortOrder
  }

  export type TicketHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    department_id?: SortOrder
    staff_id?: SortOrder
    previous_department_id?: SortOrder
    time_spent?: SortOrder
  }

  export type TicketHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    department_id?: SortOrder
    staff_id?: SortOrder
    action?: SortOrder
    previous_department_id?: SortOrder
    time_spent?: SortOrder
    entry_time?: SortOrder
    exit_time?: SortOrder
  }

  export type TicketHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    department_id?: SortOrder
    staff_id?: SortOrder
    action?: SortOrder
    previous_department_id?: SortOrder
    time_spent?: SortOrder
    entry_time?: SortOrder
    exit_time?: SortOrder
  }

  export type TicketHistorySumOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    department_id?: SortOrder
    staff_id?: SortOrder
    previous_department_id?: SortOrder
    time_spent?: SortOrder
  }

  export type TicketCreateNestedManyWithoutPatientInput = {
    create?: XOR<TicketCreateWithoutPatientInput, TicketUncheckedCreateWithoutPatientInput> | TicketCreateWithoutPatientInput[] | TicketUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutPatientInput | TicketCreateOrConnectWithoutPatientInput[]
    createMany?: TicketCreateManyPatientInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<TicketCreateWithoutPatientInput, TicketUncheckedCreateWithoutPatientInput> | TicketCreateWithoutPatientInput[] | TicketUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutPatientInput | TicketCreateOrConnectWithoutPatientInput[]
    createMany?: TicketCreateManyPatientInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TicketUpdateManyWithoutPatientNestedInput = {
    create?: XOR<TicketCreateWithoutPatientInput, TicketUncheckedCreateWithoutPatientInput> | TicketCreateWithoutPatientInput[] | TicketUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutPatientInput | TicketCreateOrConnectWithoutPatientInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutPatientInput | TicketUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: TicketCreateManyPatientInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutPatientInput | TicketUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutPatientInput | TicketUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TicketUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<TicketCreateWithoutPatientInput, TicketUncheckedCreateWithoutPatientInput> | TicketCreateWithoutPatientInput[] | TicketUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutPatientInput | TicketCreateOrConnectWithoutPatientInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutPatientInput | TicketUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: TicketCreateManyPatientInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutPatientInput | TicketUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutPatientInput | TicketUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TicketCreateWithoutDepartmentInput, TicketUncheckedCreateWithoutDepartmentInput> | TicketCreateWithoutDepartmentInput[] | TicketUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutDepartmentInput | TicketCreateOrConnectWithoutDepartmentInput[]
    createMany?: TicketCreateManyDepartmentInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type StaffUserCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<StaffUserCreateWithoutDepartmentInput, StaffUserUncheckedCreateWithoutDepartmentInput> | StaffUserCreateWithoutDepartmentInput[] | StaffUserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StaffUserCreateOrConnectWithoutDepartmentInput | StaffUserCreateOrConnectWithoutDepartmentInput[]
    createMany?: StaffUserCreateManyDepartmentInputEnvelope
    connect?: StaffUserWhereUniqueInput | StaffUserWhereUniqueInput[]
  }

  export type TicketHistoryCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TicketHistoryCreateWithoutDepartmentInput, TicketHistoryUncheckedCreateWithoutDepartmentInput> | TicketHistoryCreateWithoutDepartmentInput[] | TicketHistoryUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutDepartmentInput | TicketHistoryCreateOrConnectWithoutDepartmentInput[]
    createMany?: TicketHistoryCreateManyDepartmentInputEnvelope
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TicketCreateWithoutDepartmentInput, TicketUncheckedCreateWithoutDepartmentInput> | TicketCreateWithoutDepartmentInput[] | TicketUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutDepartmentInput | TicketCreateOrConnectWithoutDepartmentInput[]
    createMany?: TicketCreateManyDepartmentInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type StaffUserUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<StaffUserCreateWithoutDepartmentInput, StaffUserUncheckedCreateWithoutDepartmentInput> | StaffUserCreateWithoutDepartmentInput[] | StaffUserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StaffUserCreateOrConnectWithoutDepartmentInput | StaffUserCreateOrConnectWithoutDepartmentInput[]
    createMany?: StaffUserCreateManyDepartmentInputEnvelope
    connect?: StaffUserWhereUniqueInput | StaffUserWhereUniqueInput[]
  }

  export type TicketHistoryUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TicketHistoryCreateWithoutDepartmentInput, TicketHistoryUncheckedCreateWithoutDepartmentInput> | TicketHistoryCreateWithoutDepartmentInput[] | TicketHistoryUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutDepartmentInput | TicketHistoryCreateOrConnectWithoutDepartmentInput[]
    createMany?: TicketHistoryCreateManyDepartmentInputEnvelope
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TicketUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TicketCreateWithoutDepartmentInput, TicketUncheckedCreateWithoutDepartmentInput> | TicketCreateWithoutDepartmentInput[] | TicketUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutDepartmentInput | TicketCreateOrConnectWithoutDepartmentInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutDepartmentInput | TicketUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TicketCreateManyDepartmentInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutDepartmentInput | TicketUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutDepartmentInput | TicketUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type StaffUserUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<StaffUserCreateWithoutDepartmentInput, StaffUserUncheckedCreateWithoutDepartmentInput> | StaffUserCreateWithoutDepartmentInput[] | StaffUserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StaffUserCreateOrConnectWithoutDepartmentInput | StaffUserCreateOrConnectWithoutDepartmentInput[]
    upsert?: StaffUserUpsertWithWhereUniqueWithoutDepartmentInput | StaffUserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: StaffUserCreateManyDepartmentInputEnvelope
    set?: StaffUserWhereUniqueInput | StaffUserWhereUniqueInput[]
    disconnect?: StaffUserWhereUniqueInput | StaffUserWhereUniqueInput[]
    delete?: StaffUserWhereUniqueInput | StaffUserWhereUniqueInput[]
    connect?: StaffUserWhereUniqueInput | StaffUserWhereUniqueInput[]
    update?: StaffUserUpdateWithWhereUniqueWithoutDepartmentInput | StaffUserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: StaffUserUpdateManyWithWhereWithoutDepartmentInput | StaffUserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: StaffUserScalarWhereInput | StaffUserScalarWhereInput[]
  }

  export type TicketHistoryUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TicketHistoryCreateWithoutDepartmentInput, TicketHistoryUncheckedCreateWithoutDepartmentInput> | TicketHistoryCreateWithoutDepartmentInput[] | TicketHistoryUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutDepartmentInput | TicketHistoryCreateOrConnectWithoutDepartmentInput[]
    upsert?: TicketHistoryUpsertWithWhereUniqueWithoutDepartmentInput | TicketHistoryUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TicketHistoryCreateManyDepartmentInputEnvelope
    set?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    disconnect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    delete?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    update?: TicketHistoryUpdateWithWhereUniqueWithoutDepartmentInput | TicketHistoryUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TicketHistoryUpdateManyWithWhereWithoutDepartmentInput | TicketHistoryUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TicketHistoryScalarWhereInput | TicketHistoryScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TicketCreateWithoutDepartmentInput, TicketUncheckedCreateWithoutDepartmentInput> | TicketCreateWithoutDepartmentInput[] | TicketUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutDepartmentInput | TicketCreateOrConnectWithoutDepartmentInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutDepartmentInput | TicketUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TicketCreateManyDepartmentInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutDepartmentInput | TicketUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutDepartmentInput | TicketUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type StaffUserUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<StaffUserCreateWithoutDepartmentInput, StaffUserUncheckedCreateWithoutDepartmentInput> | StaffUserCreateWithoutDepartmentInput[] | StaffUserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StaffUserCreateOrConnectWithoutDepartmentInput | StaffUserCreateOrConnectWithoutDepartmentInput[]
    upsert?: StaffUserUpsertWithWhereUniqueWithoutDepartmentInput | StaffUserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: StaffUserCreateManyDepartmentInputEnvelope
    set?: StaffUserWhereUniqueInput | StaffUserWhereUniqueInput[]
    disconnect?: StaffUserWhereUniqueInput | StaffUserWhereUniqueInput[]
    delete?: StaffUserWhereUniqueInput | StaffUserWhereUniqueInput[]
    connect?: StaffUserWhereUniqueInput | StaffUserWhereUniqueInput[]
    update?: StaffUserUpdateWithWhereUniqueWithoutDepartmentInput | StaffUserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: StaffUserUpdateManyWithWhereWithoutDepartmentInput | StaffUserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: StaffUserScalarWhereInput | StaffUserScalarWhereInput[]
  }

  export type TicketHistoryUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TicketHistoryCreateWithoutDepartmentInput, TicketHistoryUncheckedCreateWithoutDepartmentInput> | TicketHistoryCreateWithoutDepartmentInput[] | TicketHistoryUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutDepartmentInput | TicketHistoryCreateOrConnectWithoutDepartmentInput[]
    upsert?: TicketHistoryUpsertWithWhereUniqueWithoutDepartmentInput | TicketHistoryUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TicketHistoryCreateManyDepartmentInputEnvelope
    set?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    disconnect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    delete?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    update?: TicketHistoryUpdateWithWhereUniqueWithoutDepartmentInput | TicketHistoryUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TicketHistoryUpdateManyWithWhereWithoutDepartmentInput | TicketHistoryUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TicketHistoryScalarWhereInput | TicketHistoryScalarWhereInput[]
  }

  export type DepartmentCreateNestedOneWithoutStaff_usersInput = {
    create?: XOR<DepartmentCreateWithoutStaff_usersInput, DepartmentUncheckedCreateWithoutStaff_usersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutStaff_usersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type TicketCreateNestedManyWithoutServed_by_userInput = {
    create?: XOR<TicketCreateWithoutServed_by_userInput, TicketUncheckedCreateWithoutServed_by_userInput> | TicketCreateWithoutServed_by_userInput[] | TicketUncheckedCreateWithoutServed_by_userInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutServed_by_userInput | TicketCreateOrConnectWithoutServed_by_userInput[]
    createMany?: TicketCreateManyServed_by_userInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketLogCreateNestedManyWithoutStaff_userInput = {
    create?: XOR<TicketLogCreateWithoutStaff_userInput, TicketLogUncheckedCreateWithoutStaff_userInput> | TicketLogCreateWithoutStaff_userInput[] | TicketLogUncheckedCreateWithoutStaff_userInput[]
    connectOrCreate?: TicketLogCreateOrConnectWithoutStaff_userInput | TicketLogCreateOrConnectWithoutStaff_userInput[]
    createMany?: TicketLogCreateManyStaff_userInputEnvelope
    connect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
  }

  export type TicketHistoryCreateNestedManyWithoutStaffInput = {
    create?: XOR<TicketHistoryCreateWithoutStaffInput, TicketHistoryUncheckedCreateWithoutStaffInput> | TicketHistoryCreateWithoutStaffInput[] | TicketHistoryUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutStaffInput | TicketHistoryCreateOrConnectWithoutStaffInput[]
    createMany?: TicketHistoryCreateManyStaffInputEnvelope
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutServed_by_userInput = {
    create?: XOR<TicketCreateWithoutServed_by_userInput, TicketUncheckedCreateWithoutServed_by_userInput> | TicketCreateWithoutServed_by_userInput[] | TicketUncheckedCreateWithoutServed_by_userInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutServed_by_userInput | TicketCreateOrConnectWithoutServed_by_userInput[]
    createMany?: TicketCreateManyServed_by_userInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketLogUncheckedCreateNestedManyWithoutStaff_userInput = {
    create?: XOR<TicketLogCreateWithoutStaff_userInput, TicketLogUncheckedCreateWithoutStaff_userInput> | TicketLogCreateWithoutStaff_userInput[] | TicketLogUncheckedCreateWithoutStaff_userInput[]
    connectOrCreate?: TicketLogCreateOrConnectWithoutStaff_userInput | TicketLogCreateOrConnectWithoutStaff_userInput[]
    createMany?: TicketLogCreateManyStaff_userInputEnvelope
    connect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
  }

  export type TicketHistoryUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<TicketHistoryCreateWithoutStaffInput, TicketHistoryUncheckedCreateWithoutStaffInput> | TicketHistoryCreateWithoutStaffInput[] | TicketHistoryUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutStaffInput | TicketHistoryCreateOrConnectWithoutStaffInput[]
    createMany?: TicketHistoryCreateManyStaffInputEnvelope
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DepartmentUpdateOneWithoutStaff_usersNestedInput = {
    create?: XOR<DepartmentCreateWithoutStaff_usersInput, DepartmentUncheckedCreateWithoutStaff_usersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutStaff_usersInput
    upsert?: DepartmentUpsertWithoutStaff_usersInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutStaff_usersInput, DepartmentUpdateWithoutStaff_usersInput>, DepartmentUncheckedUpdateWithoutStaff_usersInput>
  }

  export type TicketUpdateManyWithoutServed_by_userNestedInput = {
    create?: XOR<TicketCreateWithoutServed_by_userInput, TicketUncheckedCreateWithoutServed_by_userInput> | TicketCreateWithoutServed_by_userInput[] | TicketUncheckedCreateWithoutServed_by_userInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutServed_by_userInput | TicketCreateOrConnectWithoutServed_by_userInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutServed_by_userInput | TicketUpsertWithWhereUniqueWithoutServed_by_userInput[]
    createMany?: TicketCreateManyServed_by_userInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutServed_by_userInput | TicketUpdateWithWhereUniqueWithoutServed_by_userInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutServed_by_userInput | TicketUpdateManyWithWhereWithoutServed_by_userInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketLogUpdateManyWithoutStaff_userNestedInput = {
    create?: XOR<TicketLogCreateWithoutStaff_userInput, TicketLogUncheckedCreateWithoutStaff_userInput> | TicketLogCreateWithoutStaff_userInput[] | TicketLogUncheckedCreateWithoutStaff_userInput[]
    connectOrCreate?: TicketLogCreateOrConnectWithoutStaff_userInput | TicketLogCreateOrConnectWithoutStaff_userInput[]
    upsert?: TicketLogUpsertWithWhereUniqueWithoutStaff_userInput | TicketLogUpsertWithWhereUniqueWithoutStaff_userInput[]
    createMany?: TicketLogCreateManyStaff_userInputEnvelope
    set?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    disconnect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    delete?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    connect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    update?: TicketLogUpdateWithWhereUniqueWithoutStaff_userInput | TicketLogUpdateWithWhereUniqueWithoutStaff_userInput[]
    updateMany?: TicketLogUpdateManyWithWhereWithoutStaff_userInput | TicketLogUpdateManyWithWhereWithoutStaff_userInput[]
    deleteMany?: TicketLogScalarWhereInput | TicketLogScalarWhereInput[]
  }

  export type TicketHistoryUpdateManyWithoutStaffNestedInput = {
    create?: XOR<TicketHistoryCreateWithoutStaffInput, TicketHistoryUncheckedCreateWithoutStaffInput> | TicketHistoryCreateWithoutStaffInput[] | TicketHistoryUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutStaffInput | TicketHistoryCreateOrConnectWithoutStaffInput[]
    upsert?: TicketHistoryUpsertWithWhereUniqueWithoutStaffInput | TicketHistoryUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: TicketHistoryCreateManyStaffInputEnvelope
    set?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    disconnect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    delete?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    update?: TicketHistoryUpdateWithWhereUniqueWithoutStaffInput | TicketHistoryUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: TicketHistoryUpdateManyWithWhereWithoutStaffInput | TicketHistoryUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: TicketHistoryScalarWhereInput | TicketHistoryScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TicketUncheckedUpdateManyWithoutServed_by_userNestedInput = {
    create?: XOR<TicketCreateWithoutServed_by_userInput, TicketUncheckedCreateWithoutServed_by_userInput> | TicketCreateWithoutServed_by_userInput[] | TicketUncheckedCreateWithoutServed_by_userInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutServed_by_userInput | TicketCreateOrConnectWithoutServed_by_userInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutServed_by_userInput | TicketUpsertWithWhereUniqueWithoutServed_by_userInput[]
    createMany?: TicketCreateManyServed_by_userInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutServed_by_userInput | TicketUpdateWithWhereUniqueWithoutServed_by_userInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutServed_by_userInput | TicketUpdateManyWithWhereWithoutServed_by_userInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketLogUncheckedUpdateManyWithoutStaff_userNestedInput = {
    create?: XOR<TicketLogCreateWithoutStaff_userInput, TicketLogUncheckedCreateWithoutStaff_userInput> | TicketLogCreateWithoutStaff_userInput[] | TicketLogUncheckedCreateWithoutStaff_userInput[]
    connectOrCreate?: TicketLogCreateOrConnectWithoutStaff_userInput | TicketLogCreateOrConnectWithoutStaff_userInput[]
    upsert?: TicketLogUpsertWithWhereUniqueWithoutStaff_userInput | TicketLogUpsertWithWhereUniqueWithoutStaff_userInput[]
    createMany?: TicketLogCreateManyStaff_userInputEnvelope
    set?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    disconnect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    delete?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    connect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    update?: TicketLogUpdateWithWhereUniqueWithoutStaff_userInput | TicketLogUpdateWithWhereUniqueWithoutStaff_userInput[]
    updateMany?: TicketLogUpdateManyWithWhereWithoutStaff_userInput | TicketLogUpdateManyWithWhereWithoutStaff_userInput[]
    deleteMany?: TicketLogScalarWhereInput | TicketLogScalarWhereInput[]
  }

  export type TicketHistoryUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<TicketHistoryCreateWithoutStaffInput, TicketHistoryUncheckedCreateWithoutStaffInput> | TicketHistoryCreateWithoutStaffInput[] | TicketHistoryUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutStaffInput | TicketHistoryCreateOrConnectWithoutStaffInput[]
    upsert?: TicketHistoryUpsertWithWhereUniqueWithoutStaffInput | TicketHistoryUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: TicketHistoryCreateManyStaffInputEnvelope
    set?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    disconnect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    delete?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    update?: TicketHistoryUpdateWithWhereUniqueWithoutStaffInput | TicketHistoryUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: TicketHistoryUpdateManyWithWhereWithoutStaffInput | TicketHistoryUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: TicketHistoryScalarWhereInput | TicketHistoryScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutTicketsInput = {
    create?: XOR<PatientCreateWithoutTicketsInput, PatientUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTicketsInput
    connect?: PatientWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutTicketsInput = {
    create?: XOR<DepartmentCreateWithoutTicketsInput, DepartmentUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTicketsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type StaffUserCreateNestedOneWithoutServed_ticketsInput = {
    create?: XOR<StaffUserCreateWithoutServed_ticketsInput, StaffUserUncheckedCreateWithoutServed_ticketsInput>
    connectOrCreate?: StaffUserCreateOrConnectWithoutServed_ticketsInput
    connect?: StaffUserWhereUniqueInput
  }

  export type TicketLogCreateNestedManyWithoutTicketInput = {
    create?: XOR<TicketLogCreateWithoutTicketInput, TicketLogUncheckedCreateWithoutTicketInput> | TicketLogCreateWithoutTicketInput[] | TicketLogUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: TicketLogCreateOrConnectWithoutTicketInput | TicketLogCreateOrConnectWithoutTicketInput[]
    createMany?: TicketLogCreateManyTicketInputEnvelope
    connect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
  }

  export type TicketHistoryCreateNestedManyWithoutTicketInput = {
    create?: XOR<TicketHistoryCreateWithoutTicketInput, TicketHistoryUncheckedCreateWithoutTicketInput> | TicketHistoryCreateWithoutTicketInput[] | TicketHistoryUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutTicketInput | TicketHistoryCreateOrConnectWithoutTicketInput[]
    createMany?: TicketHistoryCreateManyTicketInputEnvelope
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
  }

  export type TicketLogUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<TicketLogCreateWithoutTicketInput, TicketLogUncheckedCreateWithoutTicketInput> | TicketLogCreateWithoutTicketInput[] | TicketLogUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: TicketLogCreateOrConnectWithoutTicketInput | TicketLogCreateOrConnectWithoutTicketInput[]
    createMany?: TicketLogCreateManyTicketInputEnvelope
    connect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
  }

  export type TicketHistoryUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<TicketHistoryCreateWithoutTicketInput, TicketHistoryUncheckedCreateWithoutTicketInput> | TicketHistoryCreateWithoutTicketInput[] | TicketHistoryUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutTicketInput | TicketHistoryCreateOrConnectWithoutTicketInput[]
    createMany?: TicketHistoryCreateManyTicketInputEnvelope
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
  }

  export type PatientUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<PatientCreateWithoutTicketsInput, PatientUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTicketsInput
    upsert?: PatientUpsertWithoutTicketsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutTicketsInput, PatientUpdateWithoutTicketsInput>, PatientUncheckedUpdateWithoutTicketsInput>
  }

  export type DepartmentUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<DepartmentCreateWithoutTicketsInput, DepartmentUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTicketsInput
    upsert?: DepartmentUpsertWithoutTicketsInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutTicketsInput, DepartmentUpdateWithoutTicketsInput>, DepartmentUncheckedUpdateWithoutTicketsInput>
  }

  export type StaffUserUpdateOneWithoutServed_ticketsNestedInput = {
    create?: XOR<StaffUserCreateWithoutServed_ticketsInput, StaffUserUncheckedCreateWithoutServed_ticketsInput>
    connectOrCreate?: StaffUserCreateOrConnectWithoutServed_ticketsInput
    upsert?: StaffUserUpsertWithoutServed_ticketsInput
    disconnect?: StaffUserWhereInput | boolean
    delete?: StaffUserWhereInput | boolean
    connect?: StaffUserWhereUniqueInput
    update?: XOR<XOR<StaffUserUpdateToOneWithWhereWithoutServed_ticketsInput, StaffUserUpdateWithoutServed_ticketsInput>, StaffUserUncheckedUpdateWithoutServed_ticketsInput>
  }

  export type TicketLogUpdateManyWithoutTicketNestedInput = {
    create?: XOR<TicketLogCreateWithoutTicketInput, TicketLogUncheckedCreateWithoutTicketInput> | TicketLogCreateWithoutTicketInput[] | TicketLogUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: TicketLogCreateOrConnectWithoutTicketInput | TicketLogCreateOrConnectWithoutTicketInput[]
    upsert?: TicketLogUpsertWithWhereUniqueWithoutTicketInput | TicketLogUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: TicketLogCreateManyTicketInputEnvelope
    set?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    disconnect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    delete?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    connect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    update?: TicketLogUpdateWithWhereUniqueWithoutTicketInput | TicketLogUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: TicketLogUpdateManyWithWhereWithoutTicketInput | TicketLogUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: TicketLogScalarWhereInput | TicketLogScalarWhereInput[]
  }

  export type TicketHistoryUpdateManyWithoutTicketNestedInput = {
    create?: XOR<TicketHistoryCreateWithoutTicketInput, TicketHistoryUncheckedCreateWithoutTicketInput> | TicketHistoryCreateWithoutTicketInput[] | TicketHistoryUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutTicketInput | TicketHistoryCreateOrConnectWithoutTicketInput[]
    upsert?: TicketHistoryUpsertWithWhereUniqueWithoutTicketInput | TicketHistoryUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: TicketHistoryCreateManyTicketInputEnvelope
    set?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    disconnect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    delete?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    update?: TicketHistoryUpdateWithWhereUniqueWithoutTicketInput | TicketHistoryUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: TicketHistoryUpdateManyWithWhereWithoutTicketInput | TicketHistoryUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: TicketHistoryScalarWhereInput | TicketHistoryScalarWhereInput[]
  }

  export type TicketLogUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<TicketLogCreateWithoutTicketInput, TicketLogUncheckedCreateWithoutTicketInput> | TicketLogCreateWithoutTicketInput[] | TicketLogUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: TicketLogCreateOrConnectWithoutTicketInput | TicketLogCreateOrConnectWithoutTicketInput[]
    upsert?: TicketLogUpsertWithWhereUniqueWithoutTicketInput | TicketLogUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: TicketLogCreateManyTicketInputEnvelope
    set?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    disconnect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    delete?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    connect?: TicketLogWhereUniqueInput | TicketLogWhereUniqueInput[]
    update?: TicketLogUpdateWithWhereUniqueWithoutTicketInput | TicketLogUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: TicketLogUpdateManyWithWhereWithoutTicketInput | TicketLogUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: TicketLogScalarWhereInput | TicketLogScalarWhereInput[]
  }

  export type TicketHistoryUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<TicketHistoryCreateWithoutTicketInput, TicketHistoryUncheckedCreateWithoutTicketInput> | TicketHistoryCreateWithoutTicketInput[] | TicketHistoryUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: TicketHistoryCreateOrConnectWithoutTicketInput | TicketHistoryCreateOrConnectWithoutTicketInput[]
    upsert?: TicketHistoryUpsertWithWhereUniqueWithoutTicketInput | TicketHistoryUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: TicketHistoryCreateManyTicketInputEnvelope
    set?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    disconnect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    delete?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    connect?: TicketHistoryWhereUniqueInput | TicketHistoryWhereUniqueInput[]
    update?: TicketHistoryUpdateWithWhereUniqueWithoutTicketInput | TicketHistoryUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: TicketHistoryUpdateManyWithWhereWithoutTicketInput | TicketHistoryUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: TicketHistoryScalarWhereInput | TicketHistoryScalarWhereInput[]
  }

  export type TicketCreateNestedOneWithoutTicket_logsInput = {
    create?: XOR<TicketCreateWithoutTicket_logsInput, TicketUncheckedCreateWithoutTicket_logsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutTicket_logsInput
    connect?: TicketWhereUniqueInput
  }

  export type StaffUserCreateNestedOneWithoutTicket_logsInput = {
    create?: XOR<StaffUserCreateWithoutTicket_logsInput, StaffUserUncheckedCreateWithoutTicket_logsInput>
    connectOrCreate?: StaffUserCreateOrConnectWithoutTicket_logsInput
    connect?: StaffUserWhereUniqueInput
  }

  export type TicketUpdateOneRequiredWithoutTicket_logsNestedInput = {
    create?: XOR<TicketCreateWithoutTicket_logsInput, TicketUncheckedCreateWithoutTicket_logsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutTicket_logsInput
    upsert?: TicketUpsertWithoutTicket_logsInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutTicket_logsInput, TicketUpdateWithoutTicket_logsInput>, TicketUncheckedUpdateWithoutTicket_logsInput>
  }

  export type StaffUserUpdateOneRequiredWithoutTicket_logsNestedInput = {
    create?: XOR<StaffUserCreateWithoutTicket_logsInput, StaffUserUncheckedCreateWithoutTicket_logsInput>
    connectOrCreate?: StaffUserCreateOrConnectWithoutTicket_logsInput
    upsert?: StaffUserUpsertWithoutTicket_logsInput
    connect?: StaffUserWhereUniqueInput
    update?: XOR<XOR<StaffUserUpdateToOneWithWhereWithoutTicket_logsInput, StaffUserUpdateWithoutTicket_logsInput>, StaffUserUncheckedUpdateWithoutTicket_logsInput>
  }

  export type TicketCreateNestedOneWithoutTicket_historyInput = {
    create?: XOR<TicketCreateWithoutTicket_historyInput, TicketUncheckedCreateWithoutTicket_historyInput>
    connectOrCreate?: TicketCreateOrConnectWithoutTicket_historyInput
    connect?: TicketWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutTicket_historyInput = {
    create?: XOR<DepartmentCreateWithoutTicket_historyInput, DepartmentUncheckedCreateWithoutTicket_historyInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTicket_historyInput
    connect?: DepartmentWhereUniqueInput
  }

  export type StaffUserCreateNestedOneWithoutTicket_historyInput = {
    create?: XOR<StaffUserCreateWithoutTicket_historyInput, StaffUserUncheckedCreateWithoutTicket_historyInput>
    connectOrCreate?: StaffUserCreateOrConnectWithoutTicket_historyInput
    connect?: StaffUserWhereUniqueInput
  }

  export type TicketUpdateOneRequiredWithoutTicket_historyNestedInput = {
    create?: XOR<TicketCreateWithoutTicket_historyInput, TicketUncheckedCreateWithoutTicket_historyInput>
    connectOrCreate?: TicketCreateOrConnectWithoutTicket_historyInput
    upsert?: TicketUpsertWithoutTicket_historyInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutTicket_historyInput, TicketUpdateWithoutTicket_historyInput>, TicketUncheckedUpdateWithoutTicket_historyInput>
  }

  export type DepartmentUpdateOneRequiredWithoutTicket_historyNestedInput = {
    create?: XOR<DepartmentCreateWithoutTicket_historyInput, DepartmentUncheckedCreateWithoutTicket_historyInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTicket_historyInput
    upsert?: DepartmentUpsertWithoutTicket_historyInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutTicket_historyInput, DepartmentUpdateWithoutTicket_historyInput>, DepartmentUncheckedUpdateWithoutTicket_historyInput>
  }

  export type StaffUserUpdateOneWithoutTicket_historyNestedInput = {
    create?: XOR<StaffUserCreateWithoutTicket_historyInput, StaffUserUncheckedCreateWithoutTicket_historyInput>
    connectOrCreate?: StaffUserCreateOrConnectWithoutTicket_historyInput
    upsert?: StaffUserUpsertWithoutTicket_historyInput
    disconnect?: StaffUserWhereInput | boolean
    delete?: StaffUserWhereInput | boolean
    connect?: StaffUserWhereUniqueInput
    update?: XOR<XOR<StaffUserUpdateToOneWithWhereWithoutTicket_historyInput, StaffUserUpdateWithoutTicket_historyInput>, StaffUserUncheckedUpdateWithoutTicket_historyInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type TicketCreateWithoutPatientInput = {
    ticket_no: string
    original_ticket_no?: string | null
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    department: DepartmentCreateNestedOneWithoutTicketsInput
    served_by_user?: StaffUserCreateNestedOneWithoutServed_ticketsInput
    ticket_logs?: TicketLogCreateNestedManyWithoutTicketInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutPatientInput = {
    id?: number
    ticket_no: string
    original_ticket_no?: string | null
    department_id: number
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    served_by?: number | null
    ticket_logs?: TicketLogUncheckedCreateNestedManyWithoutTicketInput
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutPatientInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutPatientInput, TicketUncheckedCreateWithoutPatientInput>
  }

  export type TicketCreateManyPatientInputEnvelope = {
    data: TicketCreateManyPatientInput | TicketCreateManyPatientInput[]
  }

  export type TicketUpsertWithWhereUniqueWithoutPatientInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutPatientInput, TicketUncheckedUpdateWithoutPatientInput>
    create: XOR<TicketCreateWithoutPatientInput, TicketUncheckedCreateWithoutPatientInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutPatientInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutPatientInput, TicketUncheckedUpdateWithoutPatientInput>
  }

  export type TicketUpdateManyWithWhereWithoutPatientInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutPatientInput>
  }

  export type TicketScalarWhereInput = {
    AND?: TicketScalarWhereInput | TicketScalarWhereInput[]
    OR?: TicketScalarWhereInput[]
    NOT?: TicketScalarWhereInput | TicketScalarWhereInput[]
    id?: IntFilter<"Ticket"> | number
    ticket_no?: StringFilter<"Ticket"> | string
    original_ticket_no?: StringNullableFilter<"Ticket"> | string | null
    patient_id?: IntFilter<"Ticket"> | number
    department_id?: IntFilter<"Ticket"> | number
    status?: StringFilter<"Ticket"> | string
    forwarded_from?: IntNullableFilter<"Ticket"> | number | null
    priority?: IntFilter<"Ticket"> | number
    created_at?: DateTimeFilter<"Ticket"> | Date | string
    served_at?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    served_by?: IntNullableFilter<"Ticket"> | number | null
  }

  export type TicketCreateWithoutDepartmentInput = {
    ticket_no: string
    original_ticket_no?: string | null
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    patient: PatientCreateNestedOneWithoutTicketsInput
    served_by_user?: StaffUserCreateNestedOneWithoutServed_ticketsInput
    ticket_logs?: TicketLogCreateNestedManyWithoutTicketInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutDepartmentInput = {
    id?: number
    ticket_no: string
    original_ticket_no?: string | null
    patient_id: number
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    served_by?: number | null
    ticket_logs?: TicketLogUncheckedCreateNestedManyWithoutTicketInput
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutDepartmentInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutDepartmentInput, TicketUncheckedCreateWithoutDepartmentInput>
  }

  export type TicketCreateManyDepartmentInputEnvelope = {
    data: TicketCreateManyDepartmentInput | TicketCreateManyDepartmentInput[]
  }

  export type StaffUserCreateWithoutDepartmentInput = {
    name: string
    email: string
    password: string
    role: string
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    served_tickets?: TicketCreateNestedManyWithoutServed_by_userInput
    ticket_logs?: TicketLogCreateNestedManyWithoutStaff_userInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutStaffInput
  }

  export type StaffUserUncheckedCreateWithoutDepartmentInput = {
    id?: number
    name: string
    email: string
    password: string
    role: string
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    served_tickets?: TicketUncheckedCreateNestedManyWithoutServed_by_userInput
    ticket_logs?: TicketLogUncheckedCreateNestedManyWithoutStaff_userInput
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffUserCreateOrConnectWithoutDepartmentInput = {
    where: StaffUserWhereUniqueInput
    create: XOR<StaffUserCreateWithoutDepartmentInput, StaffUserUncheckedCreateWithoutDepartmentInput>
  }

  export type StaffUserCreateManyDepartmentInputEnvelope = {
    data: StaffUserCreateManyDepartmentInput | StaffUserCreateManyDepartmentInput[]
  }

  export type TicketHistoryCreateWithoutDepartmentInput = {
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
    ticket: TicketCreateNestedOneWithoutTicket_historyInput
    staff?: StaffUserCreateNestedOneWithoutTicket_historyInput
  }

  export type TicketHistoryUncheckedCreateWithoutDepartmentInput = {
    id?: number
    ticket_id: number
    staff_id?: number | null
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
  }

  export type TicketHistoryCreateOrConnectWithoutDepartmentInput = {
    where: TicketHistoryWhereUniqueInput
    create: XOR<TicketHistoryCreateWithoutDepartmentInput, TicketHistoryUncheckedCreateWithoutDepartmentInput>
  }

  export type TicketHistoryCreateManyDepartmentInputEnvelope = {
    data: TicketHistoryCreateManyDepartmentInput | TicketHistoryCreateManyDepartmentInput[]
  }

  export type TicketUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutDepartmentInput, TicketUncheckedUpdateWithoutDepartmentInput>
    create: XOR<TicketCreateWithoutDepartmentInput, TicketUncheckedCreateWithoutDepartmentInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutDepartmentInput, TicketUncheckedUpdateWithoutDepartmentInput>
  }

  export type TicketUpdateManyWithWhereWithoutDepartmentInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type StaffUserUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: StaffUserWhereUniqueInput
    update: XOR<StaffUserUpdateWithoutDepartmentInput, StaffUserUncheckedUpdateWithoutDepartmentInput>
    create: XOR<StaffUserCreateWithoutDepartmentInput, StaffUserUncheckedCreateWithoutDepartmentInput>
  }

  export type StaffUserUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: StaffUserWhereUniqueInput
    data: XOR<StaffUserUpdateWithoutDepartmentInput, StaffUserUncheckedUpdateWithoutDepartmentInput>
  }

  export type StaffUserUpdateManyWithWhereWithoutDepartmentInput = {
    where: StaffUserScalarWhereInput
    data: XOR<StaffUserUpdateManyMutationInput, StaffUserUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type StaffUserScalarWhereInput = {
    AND?: StaffUserScalarWhereInput | StaffUserScalarWhereInput[]
    OR?: StaffUserScalarWhereInput[]
    NOT?: StaffUserScalarWhereInput | StaffUserScalarWhereInput[]
    id?: IntFilter<"StaffUser"> | number
    name?: StringFilter<"StaffUser"> | string
    email?: StringFilter<"StaffUser"> | string
    password?: StringFilter<"StaffUser"> | string
    role?: StringFilter<"StaffUser"> | string
    department_id?: IntNullableFilter<"StaffUser"> | number | null
    active?: BoolFilter<"StaffUser"> | boolean
    created_at?: DateTimeFilter<"StaffUser"> | Date | string
    reset_token?: StringNullableFilter<"StaffUser"> | string | null
    reset_token_expires?: DateTimeNullableFilter<"StaffUser"> | Date | string | null
  }

  export type TicketHistoryUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: TicketHistoryWhereUniqueInput
    update: XOR<TicketHistoryUpdateWithoutDepartmentInput, TicketHistoryUncheckedUpdateWithoutDepartmentInput>
    create: XOR<TicketHistoryCreateWithoutDepartmentInput, TicketHistoryUncheckedCreateWithoutDepartmentInput>
  }

  export type TicketHistoryUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: TicketHistoryWhereUniqueInput
    data: XOR<TicketHistoryUpdateWithoutDepartmentInput, TicketHistoryUncheckedUpdateWithoutDepartmentInput>
  }

  export type TicketHistoryUpdateManyWithWhereWithoutDepartmentInput = {
    where: TicketHistoryScalarWhereInput
    data: XOR<TicketHistoryUpdateManyMutationInput, TicketHistoryUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type TicketHistoryScalarWhereInput = {
    AND?: TicketHistoryScalarWhereInput | TicketHistoryScalarWhereInput[]
    OR?: TicketHistoryScalarWhereInput[]
    NOT?: TicketHistoryScalarWhereInput | TicketHistoryScalarWhereInput[]
    id?: IntFilter<"TicketHistory"> | number
    ticket_id?: IntFilter<"TicketHistory"> | number
    department_id?: IntFilter<"TicketHistory"> | number
    staff_id?: IntNullableFilter<"TicketHistory"> | number | null
    action?: StringFilter<"TicketHistory"> | string
    previous_department_id?: IntNullableFilter<"TicketHistory"> | number | null
    time_spent?: IntNullableFilter<"TicketHistory"> | number | null
    entry_time?: DateTimeFilter<"TicketHistory"> | Date | string
    exit_time?: DateTimeNullableFilter<"TicketHistory"> | Date | string | null
  }

  export type DepartmentCreateWithoutStaff_usersInput = {
    name: string
    code: string
    description?: string | null
    active?: boolean
    last_ticket_no?: number
    created_at?: Date | string
    tickets?: TicketCreateNestedManyWithoutDepartmentInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutStaff_usersInput = {
    id?: number
    name: string
    code: string
    description?: string | null
    active?: boolean
    last_ticket_no?: number
    created_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutDepartmentInput
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutStaff_usersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutStaff_usersInput, DepartmentUncheckedCreateWithoutStaff_usersInput>
  }

  export type TicketCreateWithoutServed_by_userInput = {
    ticket_no: string
    original_ticket_no?: string | null
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    patient: PatientCreateNestedOneWithoutTicketsInput
    department: DepartmentCreateNestedOneWithoutTicketsInput
    ticket_logs?: TicketLogCreateNestedManyWithoutTicketInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutServed_by_userInput = {
    id?: number
    ticket_no: string
    original_ticket_no?: string | null
    patient_id: number
    department_id: number
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    ticket_logs?: TicketLogUncheckedCreateNestedManyWithoutTicketInput
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutServed_by_userInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutServed_by_userInput, TicketUncheckedCreateWithoutServed_by_userInput>
  }

  export type TicketCreateManyServed_by_userInputEnvelope = {
    data: TicketCreateManyServed_by_userInput | TicketCreateManyServed_by_userInput[]
  }

  export type TicketLogCreateWithoutStaff_userInput = {
    action: string
    notes?: string | null
    created_at?: Date | string
    ticket: TicketCreateNestedOneWithoutTicket_logsInput
  }

  export type TicketLogUncheckedCreateWithoutStaff_userInput = {
    id?: number
    ticket_id: number
    action: string
    notes?: string | null
    created_at?: Date | string
  }

  export type TicketLogCreateOrConnectWithoutStaff_userInput = {
    where: TicketLogWhereUniqueInput
    create: XOR<TicketLogCreateWithoutStaff_userInput, TicketLogUncheckedCreateWithoutStaff_userInput>
  }

  export type TicketLogCreateManyStaff_userInputEnvelope = {
    data: TicketLogCreateManyStaff_userInput | TicketLogCreateManyStaff_userInput[]
  }

  export type TicketHistoryCreateWithoutStaffInput = {
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
    ticket: TicketCreateNestedOneWithoutTicket_historyInput
    department: DepartmentCreateNestedOneWithoutTicket_historyInput
  }

  export type TicketHistoryUncheckedCreateWithoutStaffInput = {
    id?: number
    ticket_id: number
    department_id: number
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
  }

  export type TicketHistoryCreateOrConnectWithoutStaffInput = {
    where: TicketHistoryWhereUniqueInput
    create: XOR<TicketHistoryCreateWithoutStaffInput, TicketHistoryUncheckedCreateWithoutStaffInput>
  }

  export type TicketHistoryCreateManyStaffInputEnvelope = {
    data: TicketHistoryCreateManyStaffInput | TicketHistoryCreateManyStaffInput[]
  }

  export type DepartmentUpsertWithoutStaff_usersInput = {
    update: XOR<DepartmentUpdateWithoutStaff_usersInput, DepartmentUncheckedUpdateWithoutStaff_usersInput>
    create: XOR<DepartmentCreateWithoutStaff_usersInput, DepartmentUncheckedCreateWithoutStaff_usersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutStaff_usersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutStaff_usersInput, DepartmentUncheckedUpdateWithoutStaff_usersInput>
  }

  export type DepartmentUpdateWithoutStaff_usersInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    last_ticket_no?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUpdateManyWithoutDepartmentNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutStaff_usersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    last_ticket_no?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutDepartmentNestedInput
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type TicketUpsertWithWhereUniqueWithoutServed_by_userInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutServed_by_userInput, TicketUncheckedUpdateWithoutServed_by_userInput>
    create: XOR<TicketCreateWithoutServed_by_userInput, TicketUncheckedCreateWithoutServed_by_userInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutServed_by_userInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutServed_by_userInput, TicketUncheckedUpdateWithoutServed_by_userInput>
  }

  export type TicketUpdateManyWithWhereWithoutServed_by_userInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutServed_by_userInput>
  }

  export type TicketLogUpsertWithWhereUniqueWithoutStaff_userInput = {
    where: TicketLogWhereUniqueInput
    update: XOR<TicketLogUpdateWithoutStaff_userInput, TicketLogUncheckedUpdateWithoutStaff_userInput>
    create: XOR<TicketLogCreateWithoutStaff_userInput, TicketLogUncheckedCreateWithoutStaff_userInput>
  }

  export type TicketLogUpdateWithWhereUniqueWithoutStaff_userInput = {
    where: TicketLogWhereUniqueInput
    data: XOR<TicketLogUpdateWithoutStaff_userInput, TicketLogUncheckedUpdateWithoutStaff_userInput>
  }

  export type TicketLogUpdateManyWithWhereWithoutStaff_userInput = {
    where: TicketLogScalarWhereInput
    data: XOR<TicketLogUpdateManyMutationInput, TicketLogUncheckedUpdateManyWithoutStaff_userInput>
  }

  export type TicketLogScalarWhereInput = {
    AND?: TicketLogScalarWhereInput | TicketLogScalarWhereInput[]
    OR?: TicketLogScalarWhereInput[]
    NOT?: TicketLogScalarWhereInput | TicketLogScalarWhereInput[]
    id?: IntFilter<"TicketLog"> | number
    ticket_id?: IntFilter<"TicketLog"> | number
    action?: StringFilter<"TicketLog"> | string
    performed_by?: IntFilter<"TicketLog"> | number
    notes?: StringNullableFilter<"TicketLog"> | string | null
    created_at?: DateTimeFilter<"TicketLog"> | Date | string
  }

  export type TicketHistoryUpsertWithWhereUniqueWithoutStaffInput = {
    where: TicketHistoryWhereUniqueInput
    update: XOR<TicketHistoryUpdateWithoutStaffInput, TicketHistoryUncheckedUpdateWithoutStaffInput>
    create: XOR<TicketHistoryCreateWithoutStaffInput, TicketHistoryUncheckedCreateWithoutStaffInput>
  }

  export type TicketHistoryUpdateWithWhereUniqueWithoutStaffInput = {
    where: TicketHistoryWhereUniqueInput
    data: XOR<TicketHistoryUpdateWithoutStaffInput, TicketHistoryUncheckedUpdateWithoutStaffInput>
  }

  export type TicketHistoryUpdateManyWithWhereWithoutStaffInput = {
    where: TicketHistoryScalarWhereInput
    data: XOR<TicketHistoryUpdateManyMutationInput, TicketHistoryUncheckedUpdateManyWithoutStaffInput>
  }

  export type PatientCreateWithoutTicketsInput = {
    name: string
    phone?: string | null
    email?: string | null
    created_at?: Date | string
  }

  export type PatientUncheckedCreateWithoutTicketsInput = {
    id?: number
    name: string
    phone?: string | null
    email?: string | null
    created_at?: Date | string
  }

  export type PatientCreateOrConnectWithoutTicketsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutTicketsInput, PatientUncheckedCreateWithoutTicketsInput>
  }

  export type DepartmentCreateWithoutTicketsInput = {
    name: string
    code: string
    description?: string | null
    active?: boolean
    last_ticket_no?: number
    created_at?: Date | string
    staff_users?: StaffUserCreateNestedManyWithoutDepartmentInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutTicketsInput = {
    id?: number
    name: string
    code: string
    description?: string | null
    active?: boolean
    last_ticket_no?: number
    created_at?: Date | string
    staff_users?: StaffUserUncheckedCreateNestedManyWithoutDepartmentInput
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutTicketsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTicketsInput, DepartmentUncheckedCreateWithoutTicketsInput>
  }

  export type StaffUserCreateWithoutServed_ticketsInput = {
    name: string
    email: string
    password: string
    role: string
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutStaff_usersInput
    ticket_logs?: TicketLogCreateNestedManyWithoutStaff_userInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutStaffInput
  }

  export type StaffUserUncheckedCreateWithoutServed_ticketsInput = {
    id?: number
    name: string
    email: string
    password: string
    role: string
    department_id?: number | null
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ticket_logs?: TicketLogUncheckedCreateNestedManyWithoutStaff_userInput
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffUserCreateOrConnectWithoutServed_ticketsInput = {
    where: StaffUserWhereUniqueInput
    create: XOR<StaffUserCreateWithoutServed_ticketsInput, StaffUserUncheckedCreateWithoutServed_ticketsInput>
  }

  export type TicketLogCreateWithoutTicketInput = {
    action: string
    notes?: string | null
    created_at?: Date | string
    staff_user: StaffUserCreateNestedOneWithoutTicket_logsInput
  }

  export type TicketLogUncheckedCreateWithoutTicketInput = {
    id?: number
    action: string
    performed_by: number
    notes?: string | null
    created_at?: Date | string
  }

  export type TicketLogCreateOrConnectWithoutTicketInput = {
    where: TicketLogWhereUniqueInput
    create: XOR<TicketLogCreateWithoutTicketInput, TicketLogUncheckedCreateWithoutTicketInput>
  }

  export type TicketLogCreateManyTicketInputEnvelope = {
    data: TicketLogCreateManyTicketInput | TicketLogCreateManyTicketInput[]
  }

  export type TicketHistoryCreateWithoutTicketInput = {
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
    department: DepartmentCreateNestedOneWithoutTicket_historyInput
    staff?: StaffUserCreateNestedOneWithoutTicket_historyInput
  }

  export type TicketHistoryUncheckedCreateWithoutTicketInput = {
    id?: number
    department_id: number
    staff_id?: number | null
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
  }

  export type TicketHistoryCreateOrConnectWithoutTicketInput = {
    where: TicketHistoryWhereUniqueInput
    create: XOR<TicketHistoryCreateWithoutTicketInput, TicketHistoryUncheckedCreateWithoutTicketInput>
  }

  export type TicketHistoryCreateManyTicketInputEnvelope = {
    data: TicketHistoryCreateManyTicketInput | TicketHistoryCreateManyTicketInput[]
  }

  export type PatientUpsertWithoutTicketsInput = {
    update: XOR<PatientUpdateWithoutTicketsInput, PatientUncheckedUpdateWithoutTicketsInput>
    create: XOR<PatientCreateWithoutTicketsInput, PatientUncheckedCreateWithoutTicketsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutTicketsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutTicketsInput, PatientUncheckedUpdateWithoutTicketsInput>
  }

  export type PatientUpdateWithoutTicketsInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpsertWithoutTicketsInput = {
    update: XOR<DepartmentUpdateWithoutTicketsInput, DepartmentUncheckedUpdateWithoutTicketsInput>
    create: XOR<DepartmentCreateWithoutTicketsInput, DepartmentUncheckedCreateWithoutTicketsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutTicketsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutTicketsInput, DepartmentUncheckedUpdateWithoutTicketsInput>
  }

  export type DepartmentUpdateWithoutTicketsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    last_ticket_no?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    staff_users?: StaffUserUpdateManyWithoutDepartmentNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    last_ticket_no?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    staff_users?: StaffUserUncheckedUpdateManyWithoutDepartmentNestedInput
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type StaffUserUpsertWithoutServed_ticketsInput = {
    update: XOR<StaffUserUpdateWithoutServed_ticketsInput, StaffUserUncheckedUpdateWithoutServed_ticketsInput>
    create: XOR<StaffUserCreateWithoutServed_ticketsInput, StaffUserUncheckedCreateWithoutServed_ticketsInput>
    where?: StaffUserWhereInput
  }

  export type StaffUserUpdateToOneWithWhereWithoutServed_ticketsInput = {
    where?: StaffUserWhereInput
    data: XOR<StaffUserUpdateWithoutServed_ticketsInput, StaffUserUncheckedUpdateWithoutServed_ticketsInput>
  }

  export type StaffUserUpdateWithoutServed_ticketsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutStaff_usersNestedInput
    ticket_logs?: TicketLogUpdateManyWithoutStaff_userNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutStaffNestedInput
  }

  export type StaffUserUncheckedUpdateWithoutServed_ticketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_logs?: TicketLogUncheckedUpdateManyWithoutStaff_userNestedInput
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type TicketLogUpsertWithWhereUniqueWithoutTicketInput = {
    where: TicketLogWhereUniqueInput
    update: XOR<TicketLogUpdateWithoutTicketInput, TicketLogUncheckedUpdateWithoutTicketInput>
    create: XOR<TicketLogCreateWithoutTicketInput, TicketLogUncheckedCreateWithoutTicketInput>
  }

  export type TicketLogUpdateWithWhereUniqueWithoutTicketInput = {
    where: TicketLogWhereUniqueInput
    data: XOR<TicketLogUpdateWithoutTicketInput, TicketLogUncheckedUpdateWithoutTicketInput>
  }

  export type TicketLogUpdateManyWithWhereWithoutTicketInput = {
    where: TicketLogScalarWhereInput
    data: XOR<TicketLogUpdateManyMutationInput, TicketLogUncheckedUpdateManyWithoutTicketInput>
  }

  export type TicketHistoryUpsertWithWhereUniqueWithoutTicketInput = {
    where: TicketHistoryWhereUniqueInput
    update: XOR<TicketHistoryUpdateWithoutTicketInput, TicketHistoryUncheckedUpdateWithoutTicketInput>
    create: XOR<TicketHistoryCreateWithoutTicketInput, TicketHistoryUncheckedCreateWithoutTicketInput>
  }

  export type TicketHistoryUpdateWithWhereUniqueWithoutTicketInput = {
    where: TicketHistoryWhereUniqueInput
    data: XOR<TicketHistoryUpdateWithoutTicketInput, TicketHistoryUncheckedUpdateWithoutTicketInput>
  }

  export type TicketHistoryUpdateManyWithWhereWithoutTicketInput = {
    where: TicketHistoryScalarWhereInput
    data: XOR<TicketHistoryUpdateManyMutationInput, TicketHistoryUncheckedUpdateManyWithoutTicketInput>
  }

  export type TicketCreateWithoutTicket_logsInput = {
    ticket_no: string
    original_ticket_no?: string | null
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    patient: PatientCreateNestedOneWithoutTicketsInput
    department: DepartmentCreateNestedOneWithoutTicketsInput
    served_by_user?: StaffUserCreateNestedOneWithoutServed_ticketsInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutTicket_logsInput = {
    id?: number
    ticket_no: string
    original_ticket_no?: string | null
    patient_id: number
    department_id: number
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    served_by?: number | null
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutTicket_logsInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutTicket_logsInput, TicketUncheckedCreateWithoutTicket_logsInput>
  }

  export type StaffUserCreateWithoutTicket_logsInput = {
    name: string
    email: string
    password: string
    role: string
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutStaff_usersInput
    served_tickets?: TicketCreateNestedManyWithoutServed_by_userInput
    ticket_history?: TicketHistoryCreateNestedManyWithoutStaffInput
  }

  export type StaffUserUncheckedCreateWithoutTicket_logsInput = {
    id?: number
    name: string
    email: string
    password: string
    role: string
    department_id?: number | null
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    served_tickets?: TicketUncheckedCreateNestedManyWithoutServed_by_userInput
    ticket_history?: TicketHistoryUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffUserCreateOrConnectWithoutTicket_logsInput = {
    where: StaffUserWhereUniqueInput
    create: XOR<StaffUserCreateWithoutTicket_logsInput, StaffUserUncheckedCreateWithoutTicket_logsInput>
  }

  export type TicketUpsertWithoutTicket_logsInput = {
    update: XOR<TicketUpdateWithoutTicket_logsInput, TicketUncheckedUpdateWithoutTicket_logsInput>
    create: XOR<TicketCreateWithoutTicket_logsInput, TicketUncheckedCreateWithoutTicket_logsInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutTicket_logsInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutTicket_logsInput, TicketUncheckedUpdateWithoutTicket_logsInput>
  }

  export type TicketUpdateWithoutTicket_logsInput = {
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutTicketsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTicketsNestedInput
    served_by_user?: StaffUserUpdateOneWithoutServed_ticketsNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutTicket_logsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_by?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type StaffUserUpsertWithoutTicket_logsInput = {
    update: XOR<StaffUserUpdateWithoutTicket_logsInput, StaffUserUncheckedUpdateWithoutTicket_logsInput>
    create: XOR<StaffUserCreateWithoutTicket_logsInput, StaffUserUncheckedCreateWithoutTicket_logsInput>
    where?: StaffUserWhereInput
  }

  export type StaffUserUpdateToOneWithWhereWithoutTicket_logsInput = {
    where?: StaffUserWhereInput
    data: XOR<StaffUserUpdateWithoutTicket_logsInput, StaffUserUncheckedUpdateWithoutTicket_logsInput>
  }

  export type StaffUserUpdateWithoutTicket_logsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutStaff_usersNestedInput
    served_tickets?: TicketUpdateManyWithoutServed_by_userNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutStaffNestedInput
  }

  export type StaffUserUncheckedUpdateWithoutTicket_logsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_tickets?: TicketUncheckedUpdateManyWithoutServed_by_userNestedInput
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type TicketCreateWithoutTicket_historyInput = {
    ticket_no: string
    original_ticket_no?: string | null
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    patient: PatientCreateNestedOneWithoutTicketsInput
    department: DepartmentCreateNestedOneWithoutTicketsInput
    served_by_user?: StaffUserCreateNestedOneWithoutServed_ticketsInput
    ticket_logs?: TicketLogCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutTicket_historyInput = {
    id?: number
    ticket_no: string
    original_ticket_no?: string | null
    patient_id: number
    department_id: number
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    served_by?: number | null
    ticket_logs?: TicketLogUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutTicket_historyInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutTicket_historyInput, TicketUncheckedCreateWithoutTicket_historyInput>
  }

  export type DepartmentCreateWithoutTicket_historyInput = {
    name: string
    code: string
    description?: string | null
    active?: boolean
    last_ticket_no?: number
    created_at?: Date | string
    tickets?: TicketCreateNestedManyWithoutDepartmentInput
    staff_users?: StaffUserCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutTicket_historyInput = {
    id?: number
    name: string
    code: string
    description?: string | null
    active?: boolean
    last_ticket_no?: number
    created_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutDepartmentInput
    staff_users?: StaffUserUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutTicket_historyInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTicket_historyInput, DepartmentUncheckedCreateWithoutTicket_historyInput>
  }

  export type StaffUserCreateWithoutTicket_historyInput = {
    name: string
    email: string
    password: string
    role: string
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutStaff_usersInput
    served_tickets?: TicketCreateNestedManyWithoutServed_by_userInput
    ticket_logs?: TicketLogCreateNestedManyWithoutStaff_userInput
  }

  export type StaffUserUncheckedCreateWithoutTicket_historyInput = {
    id?: number
    name: string
    email: string
    password: string
    role: string
    department_id?: number | null
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    served_tickets?: TicketUncheckedCreateNestedManyWithoutServed_by_userInput
    ticket_logs?: TicketLogUncheckedCreateNestedManyWithoutStaff_userInput
  }

  export type StaffUserCreateOrConnectWithoutTicket_historyInput = {
    where: StaffUserWhereUniqueInput
    create: XOR<StaffUserCreateWithoutTicket_historyInput, StaffUserUncheckedCreateWithoutTicket_historyInput>
  }

  export type TicketUpsertWithoutTicket_historyInput = {
    update: XOR<TicketUpdateWithoutTicket_historyInput, TicketUncheckedUpdateWithoutTicket_historyInput>
    create: XOR<TicketCreateWithoutTicket_historyInput, TicketUncheckedCreateWithoutTicket_historyInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutTicket_historyInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutTicket_historyInput, TicketUncheckedUpdateWithoutTicket_historyInput>
  }

  export type TicketUpdateWithoutTicket_historyInput = {
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutTicketsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTicketsNestedInput
    served_by_user?: StaffUserUpdateOneWithoutServed_ticketsNestedInput
    ticket_logs?: TicketLogUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutTicket_historyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_by?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_logs?: TicketLogUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type DepartmentUpsertWithoutTicket_historyInput = {
    update: XOR<DepartmentUpdateWithoutTicket_historyInput, DepartmentUncheckedUpdateWithoutTicket_historyInput>
    create: XOR<DepartmentCreateWithoutTicket_historyInput, DepartmentUncheckedCreateWithoutTicket_historyInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutTicket_historyInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutTicket_historyInput, DepartmentUncheckedUpdateWithoutTicket_historyInput>
  }

  export type DepartmentUpdateWithoutTicket_historyInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    last_ticket_no?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUpdateManyWithoutDepartmentNestedInput
    staff_users?: StaffUserUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutTicket_historyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    last_ticket_no?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutDepartmentNestedInput
    staff_users?: StaffUserUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type StaffUserUpsertWithoutTicket_historyInput = {
    update: XOR<StaffUserUpdateWithoutTicket_historyInput, StaffUserUncheckedUpdateWithoutTicket_historyInput>
    create: XOR<StaffUserCreateWithoutTicket_historyInput, StaffUserUncheckedCreateWithoutTicket_historyInput>
    where?: StaffUserWhereInput
  }

  export type StaffUserUpdateToOneWithWhereWithoutTicket_historyInput = {
    where?: StaffUserWhereInput
    data: XOR<StaffUserUpdateWithoutTicket_historyInput, StaffUserUncheckedUpdateWithoutTicket_historyInput>
  }

  export type StaffUserUpdateWithoutTicket_historyInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutStaff_usersNestedInput
    served_tickets?: TicketUpdateManyWithoutServed_by_userNestedInput
    ticket_logs?: TicketLogUpdateManyWithoutStaff_userNestedInput
  }

  export type StaffUserUncheckedUpdateWithoutTicket_historyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department_id?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_tickets?: TicketUncheckedUpdateManyWithoutServed_by_userNestedInput
    ticket_logs?: TicketLogUncheckedUpdateManyWithoutStaff_userNestedInput
  }

  export type TicketCreateManyPatientInput = {
    id?: number
    ticket_no: string
    original_ticket_no?: string | null
    department_id: number
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    served_by?: number | null
  }

  export type TicketUpdateWithoutPatientInput = {
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneRequiredWithoutTicketsNestedInput
    served_by_user?: StaffUserUpdateOneWithoutServed_ticketsNestedInput
    ticket_logs?: TicketLogUpdateManyWithoutTicketNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    department_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_by?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_logs?: TicketLogUncheckedUpdateManyWithoutTicketNestedInput
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    department_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_by?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TicketCreateManyDepartmentInput = {
    id?: number
    ticket_no: string
    original_ticket_no?: string | null
    patient_id: number
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
    served_by?: number | null
  }

  export type StaffUserCreateManyDepartmentInput = {
    id?: number
    name: string
    email: string
    password: string
    role: string
    active?: boolean
    created_at?: Date | string
    reset_token?: string | null
    reset_token_expires?: Date | string | null
  }

  export type TicketHistoryCreateManyDepartmentInput = {
    id?: number
    ticket_id: number
    staff_id?: number | null
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
  }

  export type TicketUpdateWithoutDepartmentInput = {
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutTicketsNestedInput
    served_by_user?: StaffUserUpdateOneWithoutServed_ticketsNestedInput
    ticket_logs?: TicketLogUpdateManyWithoutTicketNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_by?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_logs?: TicketLogUncheckedUpdateManyWithoutTicketNestedInput
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_by?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StaffUserUpdateWithoutDepartmentInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_tickets?: TicketUpdateManyWithoutServed_by_userNestedInput
    ticket_logs?: TicketLogUpdateManyWithoutStaff_userNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutStaffNestedInput
  }

  export type StaffUserUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    served_tickets?: TicketUncheckedUpdateManyWithoutServed_by_userNestedInput
    ticket_logs?: TicketLogUncheckedUpdateManyWithoutStaff_userNestedInput
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type StaffUserUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketHistoryUpdateWithoutDepartmentInput = {
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket?: TicketUpdateOneRequiredWithoutTicket_historyNestedInput
    staff?: StaffUserUpdateOneWithoutTicket_historyNestedInput
  }

  export type TicketHistoryUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketHistoryUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketCreateManyServed_by_userInput = {
    id?: number
    ticket_no: string
    original_ticket_no?: string | null
    patient_id: number
    department_id: number
    status?: string
    forwarded_from?: number | null
    priority?: number
    created_at?: Date | string
    served_at?: Date | string | null
  }

  export type TicketLogCreateManyStaff_userInput = {
    id?: number
    ticket_id: number
    action: string
    notes?: string | null
    created_at?: Date | string
  }

  export type TicketHistoryCreateManyStaffInput = {
    id?: number
    ticket_id: number
    department_id: number
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
  }

  export type TicketUpdateWithoutServed_by_userInput = {
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutTicketsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTicketsNestedInput
    ticket_logs?: TicketLogUpdateManyWithoutTicketNestedInput
    ticket_history?: TicketHistoryUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutServed_by_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket_logs?: TicketLogUncheckedUpdateManyWithoutTicketNestedInput
    ticket_history?: TicketHistoryUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateManyWithoutServed_by_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_no?: StringFieldUpdateOperationsInput | string
    original_ticket_no?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    forwarded_from?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    served_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketLogUpdateWithoutStaff_userInput = {
    action?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: TicketUpdateOneRequiredWithoutTicket_logsNestedInput
  }

  export type TicketLogUncheckedUpdateWithoutStaff_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketLogUncheckedUpdateManyWithoutStaff_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketHistoryUpdateWithoutStaffInput = {
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ticket?: TicketUpdateOneRequiredWithoutTicket_historyNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTicket_historyNestedInput
  }

  export type TicketHistoryUncheckedUpdateWithoutStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketHistoryUncheckedUpdateManyWithoutStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketLogCreateManyTicketInput = {
    id?: number
    action: string
    performed_by: number
    notes?: string | null
    created_at?: Date | string
  }

  export type TicketHistoryCreateManyTicketInput = {
    id?: number
    department_id: number
    staff_id?: number | null
    action: string
    previous_department_id?: number | null
    time_spent?: number | null
    entry_time?: Date | string
    exit_time?: Date | string | null
  }

  export type TicketLogUpdateWithoutTicketInput = {
    action?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    staff_user?: StaffUserUpdateOneRequiredWithoutTicket_logsNestedInput
  }

  export type TicketLogUncheckedUpdateWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    performed_by?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketLogUncheckedUpdateManyWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    performed_by?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketHistoryUpdateWithoutTicketInput = {
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneRequiredWithoutTicket_historyNestedInput
    staff?: StaffUserUpdateOneWithoutTicket_historyNestedInput
  }

  export type TicketHistoryUncheckedUpdateWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketHistoryUncheckedUpdateManyWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    previous_department_id?: NullableIntFieldUpdateOperationsInput | number | null
    time_spent?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: DateTimeFieldUpdateOperationsInput | Date | string
    exit_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PatientCountOutputTypeDefaultArgs instead
     */
    export type PatientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentCountOutputTypeDefaultArgs instead
     */
    export type DepartmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffUserCountOutputTypeDefaultArgs instead
     */
    export type StaffUserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffUserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketCountOutputTypeDefaultArgs instead
     */
    export type TicketCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientDefaultArgs instead
     */
    export type PatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentDefaultArgs instead
     */
    export type DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffUserDefaultArgs instead
     */
    export type StaffUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketDefaultArgs instead
     */
    export type TicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketLogDefaultArgs instead
     */
    export type TicketLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketHistoryDefaultArgs instead
     */
    export type TicketHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketHistoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}